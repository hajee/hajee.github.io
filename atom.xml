<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[People & Software]]></title>
  <link href="http://hajee.github.io/atom.xml" rel="self"/>
  <link href="http://hajee.github.io/"/>
  <updated>2014-01-05T19:12:15+01:00</updated>
  <id>http://hajee.github.io/</id>
  <author>
    <name><![CDATA[Bert Hajee]]></name>
    <email><![CDATA[hajee@moretIA.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Puppet building blocks]]></title>
    <link href="http://hajee.github.io/2013/12/30/puppet-building-blocks/"/>
    <updated>2013-12-30T20:14:10+01:00</updated>
    <id>http://hajee.github.io/2013/12/30/puppet-building-blocks</id>
    <content type="html"><![CDATA[<p>In this blog post,  I will look into Puppet and describe the building blocks Puppet uses.</p>

<p>In Puppet, you describe how your system should be configured by describing the artefacts available on the system. Per artefact, you describe it&rsquo;s detailed configuration. A configured system contains many artefacts. How can we structure these artefacts in such a way that it is readable, understandable and maybe usable by other (parts of) the organisation.</p>

<!-- more -->


<h2>The resource type</h2>

<p>Generally a system consists of files, services, processes, packages and so on and so on. In the Puppet world, these are called resources. Resources are of a specified type. Lets say, for example, we want to make sure a configuration file is available on a unix system.  Besides being available, it should also contain the right content. With Puppet, we can do this by using the <code>File</code> type.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">file</span> <span class="p">{</span><span class="s1">&#39;/application/config.xml&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="k">ensure</span>   <span class="o">=&gt;</span> <span class="n">present</span><span class="p">,</span>
</span><span class='line'>  <span class="n">content</span>  <span class="o">=&gt;</span> <span class="s1">&#39;&lt;xml&gt;just some config file&lt;/xml&gt;&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>besides the <code>File</code> type, there are types for managing <code>Users</code>, <code>Groups</code>, <code>Services</code> and so on. Actually Puppet has a lot of built-in types. If you look at <a href="http://docs.puppetlabs.com/references/latest/type.html">type documentation</a> on the puppet site,you see a list of 48 built-in types.</p>

<p><img src="http://hajee.github.io/images/list_of_types.png" title="List of built-in types" ></p>

<p>A resource type is the smallest building block available in Puppet. Besides to the built-in types, Puppet has some other mechanism&rsquo;s to define structured sets of resources on a system. These are the <code>class</code> and the <code>defined resource</code>.</p>

<p>A resource type is the smallest building block available in Puppet. Besides to the built-in types, Puppet has some other mechanism&rsquo;s to define structured sets of resources on a system. These are the <code>class</code> and the <code>defined resource</code>.</p>

<h2>The class</h2>

<p><a href="http://docs.puppetlabs.com/puppet/2.7/reference/lang_classes.html">The Puppet documentation for classes</a> states:</p>

<blockquote><p>Classes are named blocks of Puppet code which are not applied unless they are invoked by name. They can be stored in<br/>modules for later use and then declared (added to a node&#8217;s catalog) with the include function or a resource-like syntax.</p></blockquote>


<p>Quite some definition. In layman&rsquo;s terms, though a Puppet class is a way of structuring resources into a building block. The class <a href="https://forge.puppetlabs.com/puppetlabs/apache">apache</a>, for example, contains all resources needed to install, configure and run an apache https daemon on your system.</p>

<h2>The defined resource</h2>

<p><a href="http://docs.puppetlabs.com/puppet/2.7/reference/lang_defined_types.html">The Puppet documentation for defined types</a> states:</p>

<blockquote><p>Defined resource types (also called defined types or defines) are blocks of Puppet code that can be evaluated multiple<br/>times with different parameters. Once defined, they act like a new resource type: you can cause the block to be evaluated<br/>by declaring a resource of that new type.</p><p>Defines can be used as simple macros or as a lightweight way to develop fairly sophisticated resource types.</p></blockquote>


<p>As you can see in the definition, just like the <code>class</code>, the defined resource is a block of Puppet code. So they are both a means to structure your Puppet code and make building blocks of reusable resources. The difference between a <code>class</code>and a  defined type is that a <code>class</code>may only be applied to your system. A defined type however, is some sort of template that can be applied multiple times to your system.</p>

<h2>The custom type</h2>

<p>While the <code>class</code> and the defined type can and are used to describe small configurable elements on a system, the custom type is designed to do just that. Puppetlabs new that they would never be able to build all the <code>types</code> needed to describe all systems. So instead they made sure, Puppet is extensible by making your own types. In fact, all built-in types are build using the same extension mechanism that is available for custom types.</p>

<h2>Next time</h2>

<p>This concludes our small introduction into the Puppet building blocks. Next time I will dive into building your own custom resources.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Repeatability and testability of Linux platform installations]]></title>
    <link href="http://hajee.github.io/2013/12/28/repeatability-and-testability-of-linux-platform-installations/"/>
    <updated>2013-12-28T20:13:45+01:00</updated>
    <id>http://hajee.github.io/2013/12/28/repeatability-and-testability-of-linux-platform-installations</id>
    <content type="html"><![CDATA[<p>While working as a software quality manager at a large company within the Netherlands, we started working on the repeatability and testability of our Linux platforms. We wanted to be able to deliver hight quality Linux platforms and deliver them fast. We believe that both of these abilities are key to achieving that goal.
In the next month, I will post a series of blog posts on our experiences.</p>

<!-- more -->


<ul>
<li>Using RSpec to test our Linux, Oracle and WebLogic installations</li>
<li>Using Puppet to facilitate the repeatable installation of Linux systems with Oracle and WLS</li>
<li>Using Puppet custom types to make it easier to do small incremental updates on Linux systems with Oracle and WLS.</li>
<li>Getting the message across. Why we need a quick feedback loop with automated deployment and automated testing.</li>
</ul>


<p>The blog posts won&rsquo;t necessary be in the above order.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asses YOUR continuous deployment maturity]]></title>
    <link href="http://hajee.github.io/2013/10/24/asses-YOUR-continuous-deployment-maturity/"/>
    <updated>2013-10-24T14:45:47+02:00</updated>
    <id>http://hajee.github.io/2013/10/24/asses-YOUR-continuous-deployment-maturity</id>
    <content type="html"><![CDATA[<p>In the last couple of blog posts, I&rsquo;ve talked about how to describe how mature you are in your ability to do continuous deployment. <a href="http://hajee.github.io/2013/10/02/visualize-your-continuous-deployment-maturity/">This blog post</a> introduced a way to visualise the maturity. In <a href="http://hajee.github.io/2013/10/12/areas-of-interest-to-realize-continuous-deployment/">this blog post</a> I described the area&rsquo;s of interest on the x-scale of the graph. While in <a href="http://hajee.github.io/2013/10/17/levels-of-maturity-for-continuous-deployment/">the last blog post</a> I described the levels of maturity on the y-scale. That&rsquo;s all nice, but how do you use these ingredients to assess <em>YOUR</em> continuous deployment maturity? In this blog post,  I will introduce  some criteria.</p>

<!-- more -->


<p><a href="http://www.amazon.com/gp/product/0321601912?ie=UTF8&amp;tag=martinfowlerc-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321601912">&ldquo;The book Continuous Delivery&rdquo;</a> [The book] contains the following matrix.</p>

<p><img src="http://hajee.github.io/images/maturity-matrix.png" title="The Continuous Deployment Maturity Matrix" ></p>

<p>This matrix helps to get a basic feel of what you need to do to get to a certain level of maturity in a specified area of interest. But it is still rather general. It the next few sections I will describe a set of practices that I feel, <em>need</em> to be filled in to claim this maturity level. I would really like to hear from you what kind of practices YOU think are needed.</p>

<h2>Build management</h2>

<p>Build management are all processes and tools we need to ensure that,at any point in time, we can build a specific version of our software.</p>

<h3>To be repeatable you need:</h3>

<ul>
<li>A build is done regularly. Preferable daily or at least weekly</li>
<li>The build is fully automated</li>
<li>Every build is concluded with a unit-test</li>
<li>The unit-tests test 70% or more of all business functionality</li>
<li>Every build retrieves the source from a source code management system</li>
</ul>


<h3>To be consistent your need:</h3>

<ul>
<li>Every change to the source control systems, triggers a new build and a new (unit-)test</li>
<li>All dependencies with other source packages and libraries are known and managed</li>
<li>All build and test scripts are being reused.</li>
</ul>


<h3>To be quantitatively  managed, you need:</h3>

<ul>
<li>Metrics of all builds are collected</li>
<li>The metrics of all builds are visual to the whole team</li>
<li>Improvement actions are described based on the build metrics</li>
<li>After a failure of the automated build, all activities are first directed at resolving the issues</li>
</ul>


<h3>To be at an optimising level, you need:</h3>

<ul>
<li>Teams frequently discuss integration problems and solutions</li>
<li>The team strives to better visibility of problems using automated solutions</li>
<li>The team strives to signalling the problems as early as possible using automated solutions</li>
</ul>


<h1>Environments and deployment</h1>

<p>To be able to do continuous delivery, there must be a pipeline of systems for doing DTAP(Development Testing, Acceptance and Production) like tests.</p>

<h3>To be repeatable you need:</h3>

<ul>
<li>Automated deployment to some environments</li>
<li>Creation of environments is cheap (integration)</li>
<li>All configuration is externalized</li>
<li>All configuration is versioned</li>
</ul>


<h3>To be consistent your need:</h3>

<ul>
<li>Fully automated self-service push-button process for deploying software</li>
<li>Same process to deploy to every environment.</li>
<li>Scripts and tools are reused</li>
</ul>


<h3>To be quantitatively  managed, you need:</h3>

<ul>
<li>Orchestrated deployments managed</li>
<li>Release, and rollback processes tested.</li>
</ul>


<h3>To be at an optimising level, you need:</h3>

<ul>
<li>Provisioning fully automated</li>
<li>Virtualization used if applicable</li>
</ul>


<h1>Release management and compliance</h1>

<p>There must be a (strict) change management process including regulated approvals to go from state to state (e.g. from testing to acceptance and so on to production). These change management processes and approvals must be enforced.</p>

<h3>To be repeatable you need:</h3>

<ul>
<li>Infrequent releases but reliable</li>
<li>Limited traceability from requirements to release.</li>
</ul>


<h3>To be consistent your need:</h3>

<ul>
<li>Change management and approvals process defined</li>
<li>Change management and approvals process enforced</li>
<li>Regulatory and compliance conditions met</li>
</ul>


<h3>To be quantitatively  managed, you need:</h3>

<ul>
<li>Environment  health monitored</li>
<li>Application health monitored</li>
</ul>


<h3>To be at an optimising level, you need:</h3>

<ul>
<li>Operations and delivery teams regularly collaborate to manage risks</li>
<li>Operations and delivery teams regularly collaborate to reduce cycle time.</li>
</ul>


<h1>Testing</h1>

<p>Testing must be highly automated. You need at least automated unit-tests and a set of automated acceptance tests. It is preferable to have the acceptance test scenario&rsquo;s written by testers and business representatives in cooperation.</p>

<h3>To be repeatable you need:</h3>

<ul>
<li>Tests are automated</li>
<li>Tests are written during story development</li>
</ul>


<h3>To be consistent your need:</h3>

<ul>
<li>Automated unit-test  available</li>
<li>Automated acceptance test available</li>
<li>Automated acceptance test are written with/by testers</li>
<li>Testing is an integral part of the development process</li>
</ul>


<h3>To be quantitatively  managed, you need:</h3>

<ul>
<li>Quality metrics and trends tracked</li>
<li>Non functional requirements defined</li>
<li>Non functional requirements measured</li>
</ul>


<h3>To be at an optimising level, you need:</h3>

<ul>
<li>Production rollbacks rare. (&lt; 5%) * Defects found and fixed immediately. ( &lt; 48 hr)</li>
</ul>


<h1>Data management</h1>

<p>You need to have automated the way you change your data model and also the configuration data inside the database.</p>

<h3>To be repeatable you need:</h3>

<ul>
<li>Changes to databases done with automated scripts</li>
<li>Changes to databases are versioned with the application</li>
</ul>


<h3>To be consistent your need:</h3>

<ul>
<li>Database changes performed automatically as part of the deployment process</li>
</ul>


<h3>To be quantitatively  managed, you need:</h3>

<ul>
<li>Database upgrades tested with every deployment</li>
<li>Database rollbacks tested with every deployment</li>
<li>Databases performance monitored</li>
<li>Database performance continuous optimized</li>
</ul>


<h3>To be at an optimising level, you need:</h3>

<ul>
<li>release to release feedback loop of database performance and deployment process</li>
<li>release to release feedback loop of the deployment process</li>
</ul>


<h1>Configuration management</h1>

<p>To be able to get built every version in time at any moment, we need source code management tools like <a href="http://git-scm.com/">git</a> or <a href="Apache%20Subversion">subversion</a>.</p>

<h3>To be repeatable you need:</h3>

<ul>
<li>Version control in use for source code</li>
<li>Version control in use for build scripts * Version control in use deployment scripts</li>
<li>Version control in use for data migrations</li>
</ul>


<h3>To be consistent your need:</h3>

<ul>
<li>Libraries and dependencies managed</li>
<li>Version control usage policies determined by change management process</li>
</ul>


<h3>To be quantitatively  managed, you need:</h3>

<ul>
<li>Developers check-in to mainline at least once a day</li>
<li>Branching only used to release.</li>
</ul>


<h3>To be at an optimising level, you need:</h3>

<ul>
<li>Regular validation that CM policy supports effective collaboration</li>
<li>Regular validation that CM policy supports rapid development</li>
<li>Regular validation that CM policy supports auditable change management processes</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On your way to easier deployments?]]></title>
    <link href="http://hajee.github.io/2013/10/17/levels-of-maturity-for-continuous-deployment/"/>
    <updated>2013-10-17T17:15:13+02:00</updated>
    <id>http://hajee.github.io/2013/10/17/levels-of-maturity-for-continuous-deployment</id>
    <content type="html"><![CDATA[<p>In <a href="http://hajee.github.io/2013/10/02/visualize-your-continuous-deployment-maturity/">my last blog post</a>, I described the main area&rsquo;s of interest to work on to get faster and easier deployments. For every area,  the level of maturity may be different. In this blog post,  I will dive deeper in the levels of maturity and what they mean.</p>

<!-- more -->


<p>Like I told in the previous blog posts, this information is based on the book <a href="http://www.amazon.com/gp/product/0321601912?ie=UTF8&amp;tag=martinfowlerc-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321601912">&ldquo;Continuous Delivery&rdquo;</a> by <a href="http://jezhumble.net/">Jez Humble</a> and <a href="http://www.davefarley.net/">David Farley</a></p>

<h1>The Five maturity levels</h1>

<p>In the model, they describe the following five levels.</p>

<ol>
<li>Regressive</li>
<li>Repeatable</li>
<li>Consistent</li>
<li>Quantitatively managed</li>
<li>Optimizing</li>
</ol>


<p><img src="http://hajee.github.io/images/maturity-levels.png" title="The levels of maturity" ></p>

<h3>Regressive</h3>

<p>There is no process for releasing and delivering software. A new deployment becomes an intensive event with a lot of opportunity to fail. A successful deployment is a victory. Although the number in the list says 1. In their book, Jez and David call the level -1. Minus because deployment is actually in the toddler stage.</p>

<h3>Repeatable</h3>

<p>When you are at this level of maturity, some stuff is being take care of. Changes management processes are in lace. There are clear guidelines of what to do and when to do it. Most of the times the organisations have a OTAP strategy, but most of the testing is done by humans. Only a small part of the tests, if any, is automated. Not a lot has been done to automate deployment. Most of the work is done by typing commands on a terminal based on a script in a paper document. In my view,  this is the minimum level at which you can rightfully claim you are doing <a href="http://en.wikipedia.org/wiki/Information_Technology_Infrastructure_Library#ITIL_V3">ITIL</a>. As you can see this is still much lower than the levels proposed in <a href="http://www.amazon.com/gp/product/0321601912?ie=UTF8&amp;tag=martinfowlerc-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321601912">the book</a></p>

<h3>Consistent</h3>

<p>At this level of maturity,  you have a broad set of automated tests. The tests are  at a sufficient level to detected critical errors early end often. The deployment is getting more and more automated. Deploying a new version to an integrated testing environment becomes easy.</p>

<h3>quantitatively managed</h3>

<p>The testing and deployment are fully automated, and there is a pipeline in place to do the testing and deployments in OTAP environments. Bad versions are caught in the deployment pipeline before they reach production. Because deployments are easy and the quality of releases increase, teams start to do more and smaller deployments. The statistics of builds and deployments are tracked, and acted upon.</p>

<h3>optimizing</h3>

<p>At the final level, not only all processes and tools are in place, but the whole organisation around building, testing and deploying software is constantly improving. Teams regularly discuss the problems and fix them. Every deployment, whether it is in production or any test environment is a vehicle for improvement.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Area's of interest for continuous deployment]]></title>
    <link href="http://hajee.github.io/2013/10/12/areas-of-interest-to-realize-continuous-deployment/"/>
    <updated>2013-10-12T22:25:10+02:00</updated>
    <id>http://hajee.github.io/2013/10/12/areas-of-interest-to-realize-continuous-deployment</id>
    <content type="html"><![CDATA[<p>In <a href="http://hajee.github.io/2013/10/02/visualize-your-continuous-deployment-maturity/">my last blog post</a>, I showed a way to visualize the level of maturity for the six interest area&rsquo;s of continuous delivery. In this blog post,  I will dig deeper into what the areas of interest are.</p>

<!-- more -->


<h2>The area&rsquo;s of interest</h2>

<h3>Build management and continuous integration</h3>

<p>Build management are all processes and tools we need to ensure that ,at any point in time, we can build a specific version of our software. Besides being able to build it, we also need to ensure that is works. To do this, we need a set of (preferably automated) unit-tests. To be able, to quickly see the impact of source code changes, at least every night a build must be done.</p>

<h3>Environments and deployments</h3>

<p>To be able to do continuous delivery, there must be a pipeline of systems for doing DTAP(Development Testing, Acceptance and Production) like tests. It is cheap (meaning automated) to get a new environment for testing. Systems provisioning and application deployments are all automated. Also, there needs to be a way to automatically roll back to a previous well known working system state.</p>

<h3>Release management and compliance</h3>

<p>Besides all sorts of tooling stuff, processes must be in place. There must be a (strict) change management process including regulated approvals to go from state to state (e.g. from testing to acceptance and so on to production). These change management processes and approvals must be enforced.</p>

<h3>Testing</h3>

<p>To be able to do continuous delivery, testing must be highly automated. You need at least automated unit-tests and a set of automated acceptance tests. It is preferable to have the acceptance test scenario&rsquo;s written by testers and business representatives in cooperation. Not only functional tests need te be automated, there needs to be some sort of mechanism te check non-functional requirements like, for example, response times</p>

<h3>Data management</h3>

<p>While most automated installation scripts focus on provisioning the software. The data in the database is just as important. Therefore, you need to have automated the way you change your data model and also the configuration data inside the database.</p>

<h3>Configuration management</h3>

<p>To be able to get built every version in time at any moment,  we need source code management tools like <a href="http://git-scm.com/">git</a> or <a href="Apache%20Subversion">subversion</a>. All components needed to get the software working, must be under this regime of version control. This includes the libraries and all database changes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visualize your continuous deployment maturity]]></title>
    <link href="http://hajee.github.io/2013/10/02/visualize-your-continuous-deployment-maturity/"/>
    <updated>2013-10-02T17:15:13+02:00</updated>
    <id>http://hajee.github.io/2013/10/02/visualize-your-continuous-deployment-maturity</id>
    <content type="html"><![CDATA[<p>Looking around the Internet, you see more and more companies starting to do multiple deployments per day. There are the <a href="https://www.facebook.com/notes/facebook-engineering/ship-early-and-ship-twice-as-often/10150985860363920">stories of Facebook deploying multiple times per day</a>. The stories of <a href="http://blog.utest.com/continuous-deployment-and-testing-in-production/2012/12/">The Guardian</a> and many more. If you want to go down that path, it really helps having a way of visualizing where you are, and where you want to go to. This helps the discussion with the stakeholders and gets things going. In this blog post,  I will demonstrate a way to do just that.</p>

<!-- more -->


<p>In their 2010 seminal work <a href="http://www.amazon.com/gp/product/0321601912?ie=UTF8&amp;tag=martinfowlerc-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321601912">&ldquo;Continuous Delivery&rdquo;</a> <a href="http://jezhumble.net/">Jez Humble</a> and <a href="http://www.davefarley.net/">David Farley</a> described a maturity model for continuous delivery. The goal of this model was to assess the gap between where you are and where you want to be and help to define the steps you need to take to go there.</p>

<p>The model identifies six main area&rsquo;s of interest:</p>

<ul>
<li>Build management and continuous integration</li>
<li>Environments and deployments</li>
<li>Release management and compliance</li>
<li>Testing</li>
<li>Data management</li>
<li>Configuration management</li>
</ul>


<p>Each of these area&rsquo;s must be at a certain level to be able to achieve the benefits of continuous delivery. One of the key points for increasing your continuous delivery performance is to make well-balanced steps. It doesn&rsquo;t really help if your build management is top notch 100%, but you don&rsquo;t have any automated testing. Value comes when you increase the level of maturity evenly over all six focus area&rsquo;s.</p>

<p><img src="http://hajee.github.io/images/maturity_model.png" title="Visualize the level of maturity for the six interest area's" ></p>

<p>The picture shows a method to make these levels visual. This really helps in discussions with stakeholders in finding out where you are and where you need to go. Based on the graph above, you can see that it&rsquo;s best to work on improvements in data management and configuration management before you start to address other area&rsquo;s.</p>

<h1>What&rsquo;s the scale?</h1>

<p>In the model, they describe the following 5 levels:</p>

<ol>
<li>Regressive</li>
<li>Repeatable</li>
<li>Consistent</li>
<li>Quantitatively managed</li>
<li>Optimizing</li>
</ol>


<p>These levels are loosely based on the levels defined by the <a href="http://en.wikipedia.org/wiki/Capability_Maturity_Model">Capability Maturity Model</a> originally from the <a href="http://www.sei.cmu.edu/">Carnegie Mellon Software Engineering Institute (SEI)</a>. The higher the number the better you are.</p>

<h2>What&rsquo;s next?</h2>

<p>In the <a href="http://hajee.github.io/2013/10/12/areas-of-interest-to-realize-continuous-deployment/">next blog post</a>, I will dig deeper into the six main area&rsquo;s of interest.</p>
]]></content>
  </entry>
  
</feed>
