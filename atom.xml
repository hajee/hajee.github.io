<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[People & Software]]></title>
  <link href="http://hajee.github.io/atom.xml" rel="self"/>
  <link href="http://hajee.github.io/"/>
  <updated>2014-01-27T22:02:09+01:00</updated>
  <id>http://hajee.github.io/</id>
  <author>
    <name><![CDATA[Bert Hajee]]></name>
    <email><![CDATA[hajee@moretIA.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Puppet Custom Types, the easy way]]></title>
    <link href="http://hajee.github.io/2014/01/26/puppet-custom-types-the-easy-way/"/>
    <updated>2014-01-26T13:57:20+01:00</updated>
    <id>http://hajee.github.io/2014/01/26/puppet-custom-types-the-easy-way</id>
    <content type="html"><![CDATA[<p>Robert scratched his head. How would he get a Puppet class to manage a complex resource on his systems? I guess I’ll have to make a Custom Type, he thought. But last time I looked into that, I noticed you need to know a lot about Puppet Internals.</p>

<p>If you recognize this thought process, maybe it’s time to meet <a href="https://github.com/hajee/easy_type">easy_type</a>. Like the name says, easy type is designed to make it easy to build a Custom Puppet Type. In this article, we will introduce <a href="https://github.com/hajee/easy_type">easy_type</a>. We do this by taking you along on in the process of  making a Custom Type. In the process, we explain how <code>easy_type</code> actually makes it…… well easy to build a Custom Type. In the first part, we will show you how to get Puppet to see and index all your resources. In the next blog posts, we will enhance the Custom Type to be able to create, remove and modify existing resources.</p>

<!-- more -->


<h2>When to build a Custom Type</h2>

<p>Well that’s an interesting question! The Puppet language is actually very versatile, and you can do anything with it. But why would you step out of puppet and into ruby to build a Custom Type? In one of his <a href="http://garylarizza.com/blog/2013/11/25/fun-with-providers/">excellent blog posts</a>, Gary Larizza explains it in one sentence: “Because 20 execs in a defined type… “. Another indication, you’d be better of on a Custom Type path instead of a defined type, is when you need to build one or more custom facts.</p>

<blockquote><p>What would drive someone to write a custom type and provider for Puppet anyhow? Afterall, you can do ANYTHING IMAGINABLE in the Puppet DSL*! After drawing back my sarcasm a bit, let me explain where the Puppet DSL tends to fall over and the idea of a custom type and provider starts becoming more than just an incredibly vivid dream:</p><p><ul><br/>    <li>You have more than a couple of exec statements in a single class/defined type that have multiple conditional properties like ‘onlyif’ and/or ‘unless’.</li><br/>    <li>You need to use pure Ruby to manipulate data and parse it through a system binary</li><br/> <li>Your defined type has more conditional logic than your pre-nuptual agreement</li><br/>  <li>Any combination of similar arguments related to the above</li><br/></ul><br/>If the above sounds familiar to you, then you’re probably ready to build your own custom Puppet type and provider.</p><footer><strong>Gary Larizza in Fun With Puppet Providers</strong></footer></blockquote>


<h2>Let’s get started</h2>

<p>To get started, you first need to include <code>easy_type</code> in your <code>Puppetfile</code> or otherwise get it into your puppet directories. To add it to your <code>Puppetfile</code>, you can add the following line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mod</span> <span class="s2">&quot;hajee/easy_type&quot;</span><span class="p">,</span> <span class="err">“</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="err">”</span>
</span></code></pre></td></tr></table></div></figure>


<p>After that run the librarian to add the right modules to your puppet tree:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>librarian-puppet install
</span></code></pre></td></tr></table></div></figure>


<p>The <code>librarian</code> reads the <code>Puppetfile</code> and puts the nescecary files into your module tree. After this command, you can see <code>easy_type</code> in your  list of modules.</p>

<p><img src="http://hajee.github.io/images/easy_type_added.png" title="easy_type added to modules" ></p>

<p>Well that was easy. Now we have all the basic requirements in place to start. What better time then now to think about the resource you want to manage.</p>

<h2>How to manage the resource?</h2>

<p>Because <code>easy_type</code> hides some of the Puppet intricacies from you, you can focus on the resource. To continue, you need to know how:</p>

<ul>
<li>get a list of all available resources?</li>
<li>what’s important in a resource?</li>
<li>to create a resource?</li>
<li>to modify an existing resource</li>
<li>to remove one</li>
</ul>


<p>This is the basic information you need to build a custom resource.</p>

<h1>An example please?</h1>

<p>As an example I’ve picked the same Custom Type as is described in the book <a href="http://shop.oreilly.com/product/0636920026860.do">“Puppet Types and Providers&#8221;</a>.  This is an excellent book if you are into writing custom resources. It describes in great detail everything you must known and do to build a Custom Type in the standard puppet way. In the book they state:</p>

<blockquote><p>the `custom_package` type is not intended to serve as a replacement of Puppet’s existing package type. It serves as an example of how to take advantage of the features of the type and provider APIs.</p><footer><strong>Puppet Types and Providers By Dan Bode</strong> <cite>Nan Liu</cite></footer></blockquote>


<p>Of course, the same thing counts over here.</p>

<h2>A scaffold</h2>

<p>To get started, it would be helfull if we have a scafffold. Let&rsquo;s say we want to name our own module <code>my_own_easy_type</code> and we name our own Custom Type <code>custom_package</code>. Let&rsquo;s start with creating the right directories. Go over to your module directory and create the following directories:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mkdir -p my_own_easy_type/lib/puppet/provider/custom_package
</span><span class='line'>mkdir -p my_own_easy_type/lib/puppet/type/custom_package
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>The first code we need, is the next scaffold:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;easy_type&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Puppet</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">newtype</span><span class="p">(</span><span class="ss">:custom_package</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="kp">include</span> <span class="no">EasyType</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># set_command(:the_righ_command)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">to_get_raw_resources</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1"># What commando to give to get a list of all resource.</span>
</span><span class='line'>      <span class="c1"># We need to return an Array of Hashes </span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">on_create</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1"># What do we do to create a resource</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">on_modify</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1"># What do we do to modify an existingresource</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">on_destroy</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1"># What do we do to destroy/delete an existingresource</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">newparam</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="kp">include</span> <span class="no">EasyType</span>
</span><span class='line'>      <span class="n">isnamevar</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">to_translate_to_resource</span> <span class="k">do</span> <span class="o">|</span> <span class="n">raw_resource</span><span class="o">|</span>
</span><span class='line'>        <span class="c1"># how to translate from the Hash-like raw resource to get the name</span>
</span><span class='line'>        <span class="c1"># raw_resource.column_data(:name)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s put it in <code>my_own_easy_type/lib/puppet/type/custom_package.rb</code>. The next file we need is the provider file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;easy_type&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Puppet</span><span class="p">:</span><span class="ss">:Type</span><span class="o">.</span><span class="n">type</span><span class="p">(</span><span class="ss">:custom_package</span><span class="p">)</span><span class="o">.</span><span class="n">provide</span><span class="p">(</span><span class="ss">:simple</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">EasyType</span><span class="p">:</span><span class="ss">:Provider</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Manage packages with easy_type&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mk_resource_methods</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We need to put that at <code>my_own_easy_type/lib/puppet/provider/easy_type/simple.rb</code></p>

<h2>It works&hellip;. Well, kind of</h2>

<p>Actually this is all you have to do to get the basic Puppet stuff in order. Now you can give the puppet command to get a view of all available resources:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>puppet resource custom_package
</span></code></pre></td></tr></table></div></figure>


<p>And it shows&hellip;.. nothing. No output. But what is more import at this stage, is no error&rsquo;s or warnings. Now we can start working on the thing we know best. How to get the information about our resource, a package in this example, out and manageable.</p>

<h2>Let&rsquo;s get the index of all packages</h2>

<p>So let&rsquo;s change the <code>custom_package</code> so we can use Puppet to get a list of all resources. To do this, we need to add just a couple of lines. Lets first look at the method <code>to_get_raw_resources</code>. Its function is to return an Array containing all available resources you manage. Every Array entry is preferably a Hash. A Hash that contains the all the individual properties and parameters of an instance of your resource.</p>

<p>In our example,  we are managing packages. To get a list of packages on a Linux system, you can use the <code>rpm</code> command. The following os command returns a list of all packages formatted in a comma separated way containing its name and its version.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rpm -qa<span class="s1">&#39; --qf&#39;</span> %<span class="o">{</span>NAME<span class="o">}</span>, %<span class="o">{</span>VERSION<span class="o">}</span>-%<span class="o">{</span>RELEASE<span class="o">}</span><span class="se">\n</span>
</span></code></pre></td></tr></table></div></figure>


<p>We would like the Custom Type to execute this command and convert the data to an Array of Hashes.</p>

<p>To do just that, we need to change the <code>to_get_raw_resources</code> method to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">to_get_raw_resources</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">packages_string</span> <span class="o">=</span> <span class="n">rpm</span><span class="p">(</span><span class="s1">&#39;-qa&#39;</span><span class="p">,</span><span class="s1">&#39;--qf&#39;</span><span class="p">,</span><span class="s1">&#39;%{NAME}, %{VERSION}-%{RELEASE}\n&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">convert_csv_data_to_hash</span><span class="p">(</span><span class="n">packages_string</span><span class="p">,</span><span class="o">[</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:version</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>packages_string</code> will contain a string with all the information. The <code>convert_csv_data_to_hash</code> method will convert it to a hash. The elements in the hash are named <code>name</code> and <code>version</code>.</p>

<p>To let <code>easy_type</code> know rpm is an os command, we need to add the line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set_command</span><span class="p">(</span><span class="ss">:rpm</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to let Puppet know how to get the name value from the raw resource. To do this, we change the definition of the name parameter.  We need to define the <code>to_translate_to_resource</code> method. Its function is to pick just the name out of the Hash that describes the full resource. You must define this function in every parameter or property. It receives a single instance of a resource in a Hash. It is one element from the Array of Hashes we created before. Because we named the first column in our comma separated data, <code>:name</code>, we can easily get it from the Hash. Lets define the function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">to_translate_to_resource</span> <span class="k">do</span> <span class="o">|</span> <span class="n">raw_resource</span><span class="o">|</span>
</span><span class='line'>  <span class="n">raw_resource</span><span class="o">.</span><span class="n">column_data</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>TA TAAHH</h2>

<p>Now when we ask Puppet for the available <code>custom_packages</code>, we get a list of all the available packages.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>puppet resource custom_package
</span></code></pre></td></tr></table></div></figure>


<p>Output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">custom_package</span> <span class="p">{</span> <span class="s1">&#39;GConf2&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="k">ensure</span>  <span class="o">=&gt;</span> <span class="s1">&#39;present&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">custom_package</span> <span class="p">{</span> <span class="s1">&#39;MAKEDEV&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="k">ensure</span>  <span class="o">=&gt;</span> <span class="s1">&#39;present&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>But wait, didn&rsquo;t we also collect the version information? What about that? To Add the version information, we need to add a version property. A property looks very similar to the parameter that was already available in the scaffold. Here is the code for the version property:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">newproperty</span><span class="p">(</span><span class="ss">:version</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">EasyType</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">to_translate_to_resource</span> <span class="k">do</span> <span class="o">|</span> <span class="n">raw_resource</span><span class="o">|</span>
</span><span class='line'>    <span class="n">raw_resource</span><span class="o">.</span><span class="n">column_data</span><span class="p">(</span><span class="ss">:version</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now when we ask Puppet for the available <code>custom_packages</code> again, we get a list of all the available packages, inclusing the version information.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>puppet resource custom_package
</span></code></pre></td></tr></table></div></figure>


<p>Output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">custom_package</span> <span class="p">{</span> <span class="s1">&#39;GConf2&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="k">ensure</span>  <span class="o">=&gt;</span> <span class="s1">&#39;present&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">version</span> <span class="o">=&gt;</span> <span class="s1">&#39;2.14.0-9.el5&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">custom_package</span> <span class="p">{</span> <span class="s1">&#39;MAKEDEV&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="k">ensure</span>  <span class="o">=&gt;</span> <span class="s1">&#39;present&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">version</span> <span class="o">=&gt;</span> <span class="s1">&#39;3.23-1.2&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Next&hellip;</h2>

<p>In the next blog post, we will enhance our work. We will add support for changing existing resources. If, in the meanwhile you want to check <code>easy_type</code> out. You can checkout the source in the <a href="https://github.com/hajee/easy_type">github repository</a>. You can also check some <a href="https://github.com/hajee/oracle">Oracle Custom Types</a> which are build upon <code>easy_type</code>. We would love to hear your feedback on this work. You can find the example <a href="https://github.com/hajee/my_own_easy_type">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing your system installation with RSpec]]></title>
    <link href="http://hajee.github.io/2014/01/18/testing-your-system-installation-with-rspec/"/>
    <updated>2014-01-18T14:12:37+01:00</updated>
    <id>http://hajee.github.io/2014/01/18/testing-your-system-installation-with-rspec</id>
    <content type="html"><![CDATA[<p><a href="http://hajee.github.io/2014/01/13/how-to-test-systems-installations/">In the last blog post</a> we introduced described the need for a testing tool for Linux and middleware installations. After some Internet reasearch and a small test, we concluded  <a href="https://relishapp.com/rspec">RSpec</a> would be a good fit. In this blog post,  we will dive into the way we use RSpec to build the specifications and tests needed for your systems.</p>

<!-- more -->


<h2>Our environment</h2>

<p>Before we dive into RSpec, lets first describe our environment. Most of our applications use at least the combination of an Oracle database and a WebLogic JEE server. Sometimes the applications are also built using  Tibco products. Normally, all these middleware functions are installed on separate distinct systems. This means one or more  systems for the Oracle database. One or more systems for the WebLogic JEE server, and one or more systems for Tibco products. All these systems have interrelated settings. For example, the Weblogic server needs a connection to the Oracle database to get it&rsquo;s data. This group of interrelated systems, we call a platform. We build specifications and tests for a complete platform. So the specification contains all settings and tests for a set of 3 or more systems.</p>

<h2>What&rsquo;s this RSpec thing?</h2>

<p>RSpec is a tool based on the  <a href="http://en.wikipedia.org/wiki/Behavior-driven_development">Behaviour Driven Development</a>(BDD) software development process. Wikipedia says:</p>

<blockquote><p>At the heart of BDD is a rethinking of the approach to unit testing and acceptance testing that North came up with while dealing with these issues. For example, he proposes that unit test names be whole sentences starting with the word &#8220;should&#8221; and should be written in order of business value.</p></blockquote>


<p>Heart of the matter is, you write specifications, and you accompany them with a test to validate the specification. Throughout this blog post, the terms specification (and spec) and tests are both used and mean (about) the same.
If you would like to know more about the RSpec core, I recommend checking out the <a href="https://www.relishapp.com/rspec/rspec-core/v/3-0/docs">web site</a>  and to read the book <a href="http://pragprog.com/book/achbd/the-rspec-book">The RSpec Book: Behaviour-Driven Development with RSpec, Cucumber, and Friends</a></p>

<h2>The top spec</h2>

<p>The code below shows what we call, a top level spec. As you can see, we use all the normal RSpec syntax.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s2">&quot;a top spec, </span>
</span><span class='line'><span class="s2"> :with_domain =&gt; &#39;just.a.domain.com&#39;,</span>
</span><span class='line'><span class="s2"> :with_dbname =&gt; &#39;dbname&#39; do</span>
</span><span class='line'>
</span><span class='line'><span class="s2"> include_context &quot;</span><span class="n">running</span> <span class="k">in</span> <span class="n">our</span> <span class="n">development</span> <span class="n">network</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="s2"> host = &#39;dbhost&#39;</span>
</span><span class='line'><span class="s2"> describe &quot;</span><span class="no">RDBMS</span> <span class="n">host</span><span class="s2">&quot;, </span>
</span><span class='line'><span class="s2">     :on_host =&gt; host,</span>
</span><span class='line'><span class="s2">     :with_ip =&gt; &#39;10.0.0.1&#39;,</span>
</span><span class='line'><span class="s2">     :if =&gt; runs_on(host) do</span>
</span><span class='line'>
</span><span class='line'><span class="s2">     it_behaves_like &quot;</span><span class="n">runs</span> <span class="n">on</span> <span class="no">DL380</span><span class="s2">&quot;, &#39;M6&#39;, 4, &#39;4G&#39;</span>
</span><span class='line'><span class="s2">     it_behaves_like &quot;</span><span class="n">a</span> <span class="n">database</span> <span class="n">server</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">     it_behaves_like &quot;</span><span class="n">database</span> <span class="n">is</span> <span class="n">configured</span> <span class="k">for</span> <span class="n">a</span> <span class="n">specific</span> <span class="n">application</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="s2"> end</span>
</span><span class='line'>
</span><span class='line'><span class="s2"> host = &#39;wlshost&#39;</span>
</span><span class='line'><span class="s2"> describe &quot;</span><span class="no">JEE</span> <span class="n">host</span><span class="s2">&quot;, </span>
</span><span class='line'><span class="s2">     :on_host =&gt; host,</span>
</span><span class='line'><span class="s2">     :with_ip =&gt; &#39;10.0.0.3&#39;,</span>
</span><span class='line'><span class="s2">     :if =&gt; runs_on(host) do</span>
</span><span class='line'>
</span><span class='line'><span class="s2">     it_behaves_like &quot;</span><span class="n">runs</span> <span class="n">on</span> <span class="no">DL380</span><span class="s2">&quot;, &#39;M6&#39;, 4, &#39;4G&#39;</span>
</span><span class='line'><span class="s2">     it_behaves_like &quot;</span><span class="n">a</span> <span class="no">WebLogic</span> <span class="n">host</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">     it_behaves_like &quot;</span><span class="no">WebLogic</span> <span class="n">is</span> <span class="n">configured</span> <span class="n">dor</span> <span class="n">a</span> <span class="n">specific</span> <span class="n">application</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2"> end</span>
</span><span class='line'><span class="s2">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you read through the code, you can see, the top level spec, contains the specifications for all the systems in this platform. We have a <code>dbhost</code>. The spec for this system starts at line 8. The other system in the platform is the <code>wlshost</code>. Again: together, we call them a platform. To run the spec on either system, you can use the regular RSpec command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rspec toplevel_spec.rb
</span></code></pre></td></tr></table></div></figure>


<p>The line <code>:on_host =&gt; host</code>, takes care that only the right set of spec&rsquo;s and tests are run on the system. If we enter this command on node <code>wlshost</code>, only line 15 trough to line 28 are run. On the other hand, if we run the command on host <code>dbhost</code>, only lines 13 until 15 are run. If you enter the command on any other system, nothings happens.</p>

<h2>Running in different environments</h2>

<p>One of the design goals of our testing setup is that we want to be able to run the same set of tests in all of our environments. This means the same tests run in development, test, acceptance and even in production. To accomplish this, we make heavy use of RSpec&rsquo;s metadata.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s2">&quot;RDBMS host&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:on_host</span> <span class="o">=&gt;</span> <span class="n">host</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:with_ip</span> <span class="o">=&gt;</span> <span class="s1">&#39;10.0.0.1&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:if</span> <span class="o">=&gt;</span> <span class="n">runs_on</span><span class="p">(</span><span class="n">host</span><span class="p">)</span> <span class="k">do</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>:on_host =&gt; host</code> and the <code>:with_ip =&gt; '10.0.0.1'</code> are <a href="https://www.relishapp.com/rspec/rspec-core/v/3-0/docs/metadata/user-defined-metadata">user defined metadata elements</a>. Later in this blog post, I will show how we actually use this metadata to make the individual tests are unaffected by the environment the run in.</p>

<p>If you have more than a couple of environment specific settings, setting them all in the <a href="https://www.relishapp.com/rspec/rspec-core/v/3-0/docs/example-groups/basic-structure-describe-it"><code>describe block</code></a>, would become quite large and cumbersome to read and understand. Therefore, we introduced the <code>include_context "running in our
development network</code> in line 5. In this line,  we include a specific context or environment.</p>

<p>In the shared_contexts, you can specify all sorts of metadata parameters. Because they are named, you can select which one you need. Right now, we use the one that works in our development network. The shared contexts can be written in another file. Here is the one we used:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">shared_context</span> <span class="s2">&quot;running in our development network&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">meta_for</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">domain</span>           <span class="s1">&#39;just.a.domain.com&#39;</span>
</span><span class='line'>      <span class="n">dns_servers</span>      <span class="o">[</span><span class="s1">&#39;12.88.129.19&#39;</span><span class="p">,</span> <span class="s1">&#39;192.168.42.155&#39;</span><span class="o">]</span>
</span><span class='line'>      <span class="n">ntp_servers</span>      <span class="o">[</span><span class="s1">&#39;192.168.80.4&#39;</span><span class="p">,</span> <span class="s1">&#39;192.168.80.120&#39;</span><span class="p">,</span> <span class="s1">&#39;127.127.1.0&#39;</span><span class="o">]</span>
</span><span class='line'>      <span class="n">netmask</span>          <span class="s1">&#39;255.255.254.0&#39;</span>
</span><span class='line'>      <span class="n">ldap_server</span>      <span class="s1">&#39;ldap.domain.com&#39;</span>
</span><span class='line'>      <span class="n">env</span>              <span class="s1">&#39;d&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this <code>shared_context</code>,  we can specify all specific setting for an environment. What&rsquo;s even better, we can share it between different top level specs. So the top level spec&rsquo;s running in this environment, can include this shared context and have all nescecarry settings. It&rsquo;s also very <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a> If you change your dns servers, there&rsquo;s only one place you have to change this value.</p>

<p>The <a href="https://www.relishapp.com/rspec/rspec-core/v/3-0/docs/example-groups/shared-context"><code>shared_context</code></a> idiom is RSpec standard. The <code>meta_for</code> is something we added. You can specify any legal ruby variable name on the left and any ruby type on the right side.</p>

<h2>structure of the spec&rsquo;s</h2>

<p>Let&rsquo;s get back to the actual specification. Again we make heavy use of a standard RSpec feature. The <a href="https://www.relishapp.com/rspec/rspec-core/v/3-0/docs/example-groups/shared-examples">shared examples</a>.  Using <code>it_behaves_like</code>, we can call a set of specifications.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it_behaves_like</span> <span class="s2">&quot;runs on DL380&quot;</span><span class="p">,</span> <span class="s1">&#39;M6&#39;</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="s1">&#39;4G&#39;</span>
</span><span class='line'><span class="n">it_behaves_like</span> <span class="s2">&quot;a database server&quot;</span>
</span><span class='line'><span class="n">it_behaves_like</span> <span class="s2">&quot;database is configured for a specific application&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have a convention to structure the tests in three levels.</p>

<ol>
<li>The hardware</li>
<li>The type of function of the system. E.g. a database or a JEE server</li>
<li>The extra additions we need to get a specific application running on it.</li>
</ol>


<h2>The real stuff</h2>

<p>All the elements we talked about this far, are mostly stuff we need to structure the set of tests. But what does the real stuff look like? Here is part of the real stuff.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">shared_examples</span> <span class="s2">&quot;using generic services&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;having LDAP service&quot;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;file /etc/ldap.conf exists&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="no">System</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">should</span> <span class="kp">include</span> <span class="s2">&quot;/etc/ldap.conf&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;idle time limit for LDAP queries is set to 870&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="no">System</span><span class="o">.</span><span class="n">files</span><span class="o">[</span><span class="s2">&quot;/etc/ldap.conf&quot;</span><span class="o">][</span><span class="s2">&quot;idle_timelimit&quot;</span><span class="o">].</span><span class="n">should</span> <span class="n">eq</span> <span class="s2">&quot;870&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;ldap url is set to ldap://</span><span class="si">#{</span><span class="n">meta</span><span class="p">(</span><span class="ss">:ldap_server</span><span class="p">)</span><span class="si">}</span><span class="s2">/&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="no">System</span><span class="o">.</span><span class="n">files</span><span class="o">[</span><span class="s2">&quot;/etc/ldap.conf&quot;</span><span class="o">][</span><span class="s2">&quot;uri&quot;</span><span class="o">].</span><span class="n">should</span> <span class="n">eq</span> <span class="p">(</span><span class="s2">&quot;ldap://&quot;</span> <span class="o">+</span> <span class="n">meta</span><span class="p">(</span><span class="ss">:ldap_server</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;/&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;using generic DNS services&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;file /etc/resolv.conf exists&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="no">System</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">should</span> <span class="kp">include</span> <span class="s2">&quot;/etc/resolv.conf&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;dns servers are set to: </span><span class="si">#{</span><span class="n">meta</span><span class="p">(</span><span class="ss">:dns_servers</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="no">System</span><span class="o">.</span><span class="n">files</span><span class="o">[</span><span class="s2">&quot;/etc/resolv.conf&quot;</span><span class="o">][</span><span class="s2">&quot;nameserver&quot;</span><span class="o">].</span><span class="n">should</span> <span class="kp">include</span> <span class="o">*</span><span class="n">meta</span><span class="p">(</span><span class="ss">:dns_servers</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;DNS search list is set to: </span><span class="si">#{</span><span class="n">meta</span><span class="p">(</span><span class="ss">:domain</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="no">System</span><span class="o">.</span><span class="n">files</span><span class="o">[</span><span class="s2">&quot;/etc/resolv.conf&quot;</span><span class="o">][</span><span class="s2">&quot;search&quot;</span><span class="o">].</span><span class="n">should</span> <span class="n">eq_ignorecase</span> <span class="n">meta</span><span class="p">(</span><span class="ss">:domain</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;is able to resolve FQDN (</span><span class="si">#{</span><span class="n">meta</span><span class="p">(</span><span class="ss">:host</span><span class="p">)</span><span class="si">}</span><span class="s2">.</span><span class="si">#{</span><span class="n">meta</span><span class="p">(</span><span class="ss">:domain</span><span class="p">)</span><span class="si">}</span><span class="s2">)&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="no">System</span><span class="o">.</span><span class="n">check_dns</span><span class="p">(</span><span class="n">meta</span><span class="p">(</span><span class="ss">:host</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;.&quot;</span> <span class="o">+</span> <span class="n">meta</span><span class="p">(</span><span class="ss">:domain</span><span class="p">))</span><span class="o">.</span><span class="n">should</span> <span class="n">eq</span> <span class="kp">true</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is part of the specifications for the base Linux system. It describes the LDAP and DNS settings.  Here, you see the basic RSpec structure. We use <code>describe</code> to structure  a big set of specifications and tests into smaller units. The actual specifications are done using the <code>it</code> commands.  Our aim is to write communicable text in the <code>it</code> statement. We have noticed that besides a good test tool, RSpec really enabled us to communicate about what we did and why we did it.</p>

<p>The <code>System.files["/etc/ldap.conf"]["idle_timelimit"].should eq "870"</code> is the actual test. Also in this code, we place a high value on communication. Even someone who doesn&rsquo;t know anything about RSpec and ruby, but knows about LDAP, is able to understand that we test if the <code>idle_timelimit</code> in <code>/etc/ldap.conf</code> is set to 870.</p>

<h2>What does that meta thing do?</h2>

<p>I told you before that we make heavy use of Rspec&rsquo;s user defined metadata. We define the information either in the describe block or we can describe them in the shared_context&rsquo;s. But in the test, is where we actually use them. Let&rsquo;s look at one in detail.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;dns servers are set to: </span><span class="si">#{</span><span class="n">meta</span><span class="p">(</span><span class="ss">:dns_servers</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">System</span><span class="o">.</span><span class="n">files</span><span class="o">[</span><span class="s2">&quot;/etc/resolv.conf&quot;</span><span class="o">][</span><span class="s2">&quot;nameserver&quot;</span><span class="o">].</span><span class="n">should</span> <span class="kp">include</span> <span class="o">*</span><span class="n">meta</span><span class="p">(</span><span class="ss">:dns_servers</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This specification text contains a call to the <code>meta</code> method with the parameter <code>:dns_servers</code>. This call looks into the meta information that&rsquo;s available and retrieves the value for <code>:dns_servers</code>. If you check back to the <code>shared_context</code>, you can see, that it translates to <code>['12.88.129.19', '192.168.42.155']</code>. So when this specification is run, the description of the specification will become:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">dns</span> <span class="n">servers</span> <span class="n">are</span> <span class="n">set</span> <span class="ss">to</span><span class="p">:</span> <span class="o">[</span><span class="s2">&quot;12.88.129.19&quot;</span><span class="p">,</span> <span class="s2">&quot;192.168.42.155&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the test itself,  the <code>*meta(:dns_servers)</code> will also be translated to the array with the two string values.</p>

<p>This <code>meta</code> method is <strong>not</strong> standard RSpec. In standard RSpec,  there is a difference between meta information you can use on the description level and the meta information you can use in the test. We felt that it would be useful to use them equally in both the description and the test. So we build our own extension to the RSpec meta information.</p>

<h2>The <strong>real</strong> real stuff</h2>

<p>I said before that I would show you the real stuff. But that was a small lie. The <code>System</code> class you see in the example is an abstraction. An abstraction we use to keep the spec&rsquo;s and tests at that level very readable and with a high communication value. Did I tell you the value we put on communication ;&ndash;). But <strong>NOW</strong> I&#8217;,m going to show you the real stuff. Here&hellip;. without further ado, is the <code>System</code> class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">System</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">files</span>
</span><span class='line'>      <span class="no">Facter</span><span class="o">.</span><span class="n">value</span><span class="p">(</span><span class="s2">&quot;system_files&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">service_startup</span>
</span><span class='line'>      <span class="k">return</span> <span class="no">Facter</span><span class="o">.</span><span class="n">fact</span><span class="p">(</span><span class="s2">&quot;service_startup&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the <code>System class</code>,  we use the <a href="http://puppetlabs.com/facter">Facter gem</a>.</p>

<blockquote><p>Facter is a lightweight program that gathers basic node information about the hardware and operating system. Facter is especially useful for retrieving things like operating system names, hardware characteristics, IP addresses, MAC addresses, and SSH keys.</p></blockquote>


<p>With facter,  we retrieve all sorts of information from the operating system and middleware in a way that we can easily use it in our spec&rsquo;s (Or in a puppet manifest). Depending on the kind of information, it returns an integer, an array, a string or even a <a href="http://ruby-doc.org/core-2.1.0/Hash.html">hash</a>. Returning a hash helps in making the higher level tests very easy to read. Let me give you an example. Let&rsquo;s look at the test below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;idle time limit for LDAP queries is set to 870&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">System</span><span class="o">.</span><span class="n">files</span><span class="o">[</span><span class="s2">&quot;/etc/ldap.conf&quot;</span><span class="o">][</span><span class="s2">&quot;idle_timelimit&quot;</span><span class="o">].</span><span class="n">should</span> <span class="n">eq</span> <span class="s2">&quot;870&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It calls the <code>files</code> method on the <code>System</code> class.  We&rsquo;ve seen the files method calling the <code>system_files</code>  fact. The fact returns the following information:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;/etc/anther_file&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">}</span>
</span><span class='line'><span class="s2">&quot;/etc/ldap.conf&quot;</span>  <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;idle_timelimit&quot;</span>          <span class="o">=&gt;</span>  <span class="s2">&quot;870&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;another_setting&quot;</span>     <span class="o">=&gt;</span>  <span class="s2">&quot;nonsense&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s why it is easy to get the <code>idele_timelimit</code> from <code>/etc/ldap.conf</code></p>

<h2>Whats next&hellip;</h2>

<p>Next time, I&rsquo;m going to tell you a bit about the work we did to make it easier to build custom types and resources for Puppet. Stay tuned.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to test systems installations]]></title>
    <link href="http://hajee.github.io/2014/01/13/how-to-test-systems-installations/"/>
    <updated>2014-01-13T20:14:10+01:00</updated>
    <id>http://hajee.github.io/2014/01/13/how-to-test-systems-installations</id>
    <content type="html"><![CDATA[<p>Just imagine yourself installing a Linux system with an Oracle database and a WebLogic application server. There are a lot of manual steps that have to be taken. A lot of commands to be typed and a lot of configurations to be set right in order to get the perfect system for the application. A lot of things can go wrong. You can miss a configuration setting. You can forget a command. Hopefully you get an error message because you did something wrong, but it can also turn out te be a silent error. One you only see after you have given the system to the application developers, or worse one that only comes out after the system is running in production and some load is put onto it. Hoe do we make sure a system is correct after the installation. In this blog post,  I will describe how we used Rspec to test out installations.</p>

<!-- more -->


<h2>How it&rsquo;s done mostly</h2>

<p>In the area&rsquo;s of interest for continuous deployment, testing is a separate topic. Although testing  has become mainstream in regular software development, testing isn&rsquo;t really that mainstream when it comes to environments and deployments. Certainly not automated testing. Most of the times, the operations guy checks a couple of items on a checklist. Does the system boot well? Are there any error messages during the boot? Can I log in as root? Can I ping to the router? Can I connect to the database? All good tests, but hardly sufficient.</p>

<h2>It&rsquo;s quite big and complex</h2>

<p>Actualy te be certain a system is installed correctly, is a rather complex and big task. There are numerous configuration files and settings. Every individual setting might cause the system to misbehave. Not only that, but the settings are also interrelated. Sometimes, if I change setting X, then I must also change setting Y. If for example I change the hostname of a Linux system, I might also have to change the hostname for the web server.</p>

<p>From research,  we know that the human brain is very powerful. But it lacks the capacity to see and manage a lot of intricate small little details. So even a very clever devops engineer can easily forget the extra change in setting Y after he changes setting X.</p>

<h2>how can we manage?</h2>

<p>We could of course after an installation have QA check all settings. Because there are so many of the small little, but important settings, this would become a very labour intensive task. Not to mention a tedious and an error prone task. We need help. Just like in regular software development, we need to test our units with automated tests. The units can be the different kinds of settings. In the figure below you see an extract of running a unit-test for  a Linux installation.</p>

<p><img src="http://hajee.github.io/images/rspec_output.png" title="Part of an Rspec report on an installation" ></p>

<h2>What tools do we need?</h2>

<p>The market for testing tools for regular software is crowded. A lot of good tools and frameworks exist for that kind of work. The market for testing tools for devops is a lot more dense. We decided to use <a href="https://relishapp.com/rspec">RSpec</a> a tool mostly used in behaviour driven software development in the <a href="https://www.ruby-lang.org/en/">Ruby world</a>. We choose Rspec because of these reasons:</p>

<ul>
<li>After a small test, it really seemed to fit</li>
<li>It is not only great as a test tool but even better as a communication tool (more on that later)</li>
<li>It is open source and therefore we don&rsquo;t need any expensive license</li>
<li>It has a large and vibrant user community</li>
<li>Because we were aiming at using <a href="http://puppetlabs.com/puppet/puppet-enterprise">Puppet</a>, we needed Ruby on our systems anyway.</li>
</ul>


<h2>Communication</h2>

<p>One of the best things of RSpec is the clarity of its reporting. We noticed that the RSpec reports, where a means of discussion between the different stakeholders. In the past,  we&rsquo;d have these vague discussions about a setting. Not all stakeholders new what the setting meant and why it was setup this way. After using RSpec, all of a sudden, we could pinpoint a certain setting and have a meaningful discussion about the reason of the setting and the actual value.</p>

<h2>How we use it?</h2>

<p>Like I explained before, we are using the automated tests to check our settings. This means we mostly do checks on those sometimes we do a little bit more. For example, when we check the settings of the DNS resolver on a system, it is quite easy to extend the test to do a lookup and a reverse lookup to assess if it is really working.</p>

<p>On the other hand, if a new package solves a certain bug, it is easy to test if a certain version of that package is installed =, but quite hard to simulate the bug te check if it is actually solved. So we don&rsquo;t do that.</p>

<h2>Is the test sufficient?</h2>

<p><strong>NO</strong> definitely not. Just like the unit-tests of a regular application is insufficient. the RSpec tests are just a first kind of smoke test. But we noticed it is a very valuable one. After the RSpec tests are done, you still need acceptance and integration tests. Preferably with the application and all related middleware installed.</p>

<h2>Next&hellip;</h2>

<p>In the <a href="http://hajee.github.io/2014/01/18/testing-your-system-installation-with-rspec/">next blog post</a>  I will explain how we have structured our Rspec code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puppet building blocks]]></title>
    <link href="http://hajee.github.io/2013/12/30/puppet-building-blocks/"/>
    <updated>2013-12-30T20:14:10+01:00</updated>
    <id>http://hajee.github.io/2013/12/30/puppet-building-blocks</id>
    <content type="html"><![CDATA[<p>In this blog post,  I will look into Puppet and describe the building blocks Puppet uses.</p>

<p>In Puppet, you describe how your system should be configured by describing the artefacts available on the system. Per artefact, you describe it&rsquo;s detailed configuration. A configured system contains many artefacts. How can we structure these artefacts in such a way that it is readable, understandable and maybe usable by other (parts of) the organisation.</p>

<!-- more -->


<h2>The resource type</h2>

<p>Generally a system consists of files, services, processes, packages and so on and so on. In the Puppet world, these are called resources. Resources are of a specified type. Lets say, for example, we want to make sure a configuration file is available on a unix system.  Besides being available, it should also contain the right content. With Puppet, we can do this by using the <code>File</code> type.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">file</span> <span class="p">{</span><span class="s1">&#39;/application/config.xml&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="k">ensure</span>   <span class="o">=&gt;</span> <span class="n">present</span><span class="p">,</span>
</span><span class='line'>  <span class="n">content</span>  <span class="o">=&gt;</span> <span class="s1">&#39;&lt;xml&gt;just some config file&lt;/xml&gt;&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>besides the <code>File</code> type, there are types for managing <code>Users</code>, <code>Groups</code>, <code>Services</code> and so on. Actually Puppet has a lot of built-in types. If you look at <a href="http://docs.puppetlabs.com/references/latest/type.html">type documentation</a> on the puppet site,you see a list of 48 built-in types.</p>

<p><img src="http://hajee.github.io/images/list_of_types.png" title="List of built-in types" ></p>

<p>A resource type is the smallest building block available in Puppet. Besides to the built-in types, Puppet has some other mechanism&rsquo;s to define structured sets of resources on a system. These are the <code>class</code> and the <code>defined resource</code>.</p>

<p>A resource type is the smallest building block available in Puppet. Besides to the built-in types, Puppet has some other mechanism&rsquo;s to define structured sets of resources on a system. These are the <code>class</code> and the <code>defined resource</code>.</p>

<h2>The class</h2>

<p><a href="http://docs.puppetlabs.com/puppet/2.7/reference/lang_classes.html">The Puppet documentation for classes</a> states:</p>

<blockquote><p>Classes are named blocks of Puppet code which are not applied unless they are invoked by name. They can be stored in<br/>modules for later use and then declared (added to a node&#8217;s catalog) with the include function or a resource-like syntax.</p></blockquote>


<p>Quite some definition. In layman&rsquo;s terms, though a Puppet class is a way of structuring resources into a building block. The class <a href="https://forge.puppetlabs.com/puppetlabs/apache">apache</a>, for example, contains all resources needed to install, configure and run an apache https daemon on your system.</p>

<h2>The defined resource</h2>

<p><a href="http://docs.puppetlabs.com/puppet/2.7/reference/lang_defined_types.html">The Puppet documentation for defined types</a> states:</p>

<blockquote><p>Defined resource types (also called defined types or defines) are blocks of Puppet code that can be evaluated multiple<br/>times with different parameters. Once defined, they act like a new resource type: you can cause the block to be evaluated<br/>by declaring a resource of that new type.</p><p>Defines can be used as simple macros or as a lightweight way to develop fairly sophisticated resource types.</p></blockquote>


<p>As you can see in the definition, just like the <code>class</code>, the defined resource is a block of Puppet code. So they are both a means to structure your Puppet code and make building blocks of reusable resources. The difference between a <code>class</code>and a  defined type is that a <code>class</code>may only be applied to your system. A defined type however, is some sort of template that can be applied multiple times to your system.</p>

<h2>The custom type</h2>

<p>While the <code>class</code> and the defined type can and are used to describe small configurable elements on a system, the custom type is designed to do just that. Puppetlabs new that they would never be able to build all the <code>types</code> needed to describe all systems. So instead they made sure, Puppet is extensible by making your own types. In fact, all built-in types are build using the same extension mechanism that is available for custom types.</p>

<h2>Next time</h2>

<p>This concludes our small introduction into the Puppet building blocks. Next time I will dive into building your own custom resources.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Repeatability and testability of Linux platform installations]]></title>
    <link href="http://hajee.github.io/2013/12/28/repeatability-and-testability-of-linux-platform-installations/"/>
    <updated>2013-12-28T20:13:45+01:00</updated>
    <id>http://hajee.github.io/2013/12/28/repeatability-and-testability-of-linux-platform-installations</id>
    <content type="html"><![CDATA[<p>While working as a software quality manager at a large company within the Netherlands, we started working on the repeatability and testability of our Linux platforms. We wanted to be able to deliver hight quality Linux platforms and deliver them fast. We believe that both of these abilities are key to achieving that goal.
In the next month, I will post a series of blog posts on our experiences.</p>

<!-- more -->


<ul>
<li>Using RSpec to test our Linux, Oracle and WebLogic installations</li>
<li>Using Puppet to facilitate the repeatable installation of Linux systems with Oracle and WLS</li>
<li>Using Puppet custom types to make it easier to do small incremental updates on Linux systems with Oracle and WLS.</li>
<li>Getting the message across. Why we need a quick feedback loop with automated deployment and automated testing.</li>
</ul>


<p>The blog posts won&rsquo;t necessary be in the above order.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asses YOUR continuous deployment maturity]]></title>
    <link href="http://hajee.github.io/2013/10/24/asses-YOUR-continuous-deployment-maturity/"/>
    <updated>2013-10-24T14:45:47+02:00</updated>
    <id>http://hajee.github.io/2013/10/24/asses-YOUR-continuous-deployment-maturity</id>
    <content type="html"><![CDATA[<p>In the last couple of blog posts, I&rsquo;ve talked about how to describe how mature you are in your ability to do continuous deployment. <a href="http://hajee.github.io/2013/10/02/visualize-your-continuous-deployment-maturity/">This blog post</a> introduced a way to visualise the maturity. In <a href="http://hajee.github.io/2013/10/12/areas-of-interest-to-realize-continuous-deployment/">this blog post</a> I described the area&rsquo;s of interest on the x-scale of the graph. While in <a href="http://hajee.github.io/2013/10/17/levels-of-maturity-for-continuous-deployment/">the last blog post</a> I described the levels of maturity on the y-scale. That&rsquo;s all nice, but how do you use these ingredients to assess <em>YOUR</em> continuous deployment maturity? In this blog post,  I will introduce  some criteria.</p>

<!-- more -->


<p><a href="http://www.amazon.com/gp/product/0321601912?ie=UTF8&amp;tag=martinfowlerc-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321601912">&ldquo;The book Continuous Delivery&rdquo;</a> [The book] contains the following matrix.</p>

<p><img src="http://hajee.github.io/images/maturity-matrix.png" title="The Continuous Deployment Maturity Matrix" ></p>

<p>This matrix helps to get a basic feel of what you need to do to get to a certain level of maturity in a specified area of interest. But it is still rather general. It the next few sections I will describe a set of practices that I feel, <em>need</em> to be filled in to claim this maturity level. I would really like to hear from you what kind of practices YOU think are needed.</p>

<h2>Build management</h2>

<p>Build management are all processes and tools we need to ensure that,at any point in time, we can build a specific version of our software.</p>

<h3>To be repeatable you need:</h3>

<ul>
<li>A build is done regularly. Preferable daily or at least weekly</li>
<li>The build is fully automated</li>
<li>Every build is concluded with a unit-test</li>
<li>The unit-tests test 70% or more of all business functionality</li>
<li>Every build retrieves the source from a source code management system</li>
</ul>


<h3>To be consistent your need:</h3>

<ul>
<li>Every change to the source control systems, triggers a new build and a new (unit-)test</li>
<li>All dependencies with other source packages and libraries are known and managed</li>
<li>All build and test scripts are being reused.</li>
</ul>


<h3>To be quantitatively  managed, you need:</h3>

<ul>
<li>Metrics of all builds are collected</li>
<li>The metrics of all builds are visual to the whole team</li>
<li>Improvement actions are described based on the build metrics</li>
<li>After a failure of the automated build, all activities are first directed at resolving the issues</li>
</ul>


<h3>To be at an optimising level, you need:</h3>

<ul>
<li>Teams frequently discuss integration problems and solutions</li>
<li>The team strives to better visibility of problems using automated solutions</li>
<li>The team strives to signalling the problems as early as possible using automated solutions</li>
</ul>


<h2>Environments and deployment</h2>

<p>To be able to do continuous delivery, there must be a pipeline of systems for doing DTAP(Development Testing, Acceptance and Production) like tests.</p>

<h3>To be repeatable you need:</h3>

<ul>
<li>Automated deployment to some environments</li>
<li>Creation of environments is cheap (integration)</li>
<li>All configuration is externalized</li>
<li>All configuration is versioned</li>
</ul>


<h3>To be consistent your need:</h3>

<ul>
<li>Fully automated self-service push-button process for deploying software</li>
<li>Same process to deploy to every environment.</li>
<li>Scripts and tools are reused</li>
</ul>


<h3>To be quantitatively  managed, you need:</h3>

<ul>
<li>Orchestrated deployments managed</li>
<li>Release, and rollback processes tested.</li>
</ul>


<h3>To be at an optimising level, you need:</h3>

<ul>
<li>Provisioning fully automated</li>
<li>Virtualization used if applicable</li>
</ul>


<h2>Release management and compliance</h2>

<p>There must be a (strict) change management process including regulated approvals to go from state to state (e.g. from testing to acceptance and so on to production). These change management processes and approvals must be enforced.</p>

<h3>To be repeatable you need:</h3>

<ul>
<li>Infrequent releases but reliable</li>
<li>Limited traceability from requirements to release.</li>
</ul>


<h3>To be consistent your need:</h3>

<ul>
<li>Change management and approvals process defined</li>
<li>Change management and approvals process enforced</li>
<li>Regulatory and compliance conditions met</li>
</ul>


<h3>To be quantitatively  managed, you need:</h3>

<ul>
<li>Environment  health monitored</li>
<li>Application health monitored</li>
</ul>


<h3>To be at an optimising level, you need:</h3>

<ul>
<li>Operations and delivery teams regularly collaborate to manage risks</li>
<li>Operations and delivery teams regularly collaborate to reduce cycle time.</li>
</ul>


<h2>Testing</h2>

<p>Testing must be highly automated. You need at least automated unit-tests and a set of automated acceptance tests. It is preferable to have the acceptance test scenario&rsquo;s written by testers and business representatives in cooperation.</p>

<h3>To be repeatable you need:</h3>

<ul>
<li>Tests are automated</li>
<li>Tests are written during story development</li>
</ul>


<h3>To be consistent your need:</h3>

<ul>
<li>Automated unit-test  available</li>
<li>Automated acceptance test available</li>
<li>Automated acceptance test are written with/by testers</li>
<li>Testing is an integral part of the development process</li>
</ul>


<h3>To be quantitatively  managed, you need:</h3>

<ul>
<li>Quality metrics and trends tracked</li>
<li>Non functional requirements defined</li>
<li>Non functional requirements measured</li>
</ul>


<h3>To be at an optimising level, you need:</h3>

<ul>
<li>Production rollbacks rare. (&lt; 5%) * Defects found and fixed immediately. ( &lt; 48 hr)</li>
</ul>


<h2>Data management</h2>

<p>You need to have automated the way you change your data model and also the configuration data inside the database.</p>

<h3>To be repeatable you need:</h3>

<ul>
<li>Changes to databases done with automated scripts</li>
<li>Changes to databases are versioned with the application</li>
</ul>


<h3>To be consistent your need:</h3>

<ul>
<li>Database changes performed automatically as part of the deployment process</li>
</ul>


<h3>To be quantitatively  managed, you need:</h3>

<ul>
<li>Database upgrades tested with every deployment</li>
<li>Database rollbacks tested with every deployment</li>
<li>Databases performance monitored</li>
<li>Database performance continuous optimized</li>
</ul>


<h3>To be at an optimising level, you need:</h3>

<ul>
<li>release to release feedback loop of database performance and deployment process</li>
<li>release to release feedback loop of the deployment process</li>
</ul>


<h2>Configuration management</h2>

<p>To be able to get built every version in time at any moment, we need source code management tools like <a href="http://git-scm.com/">git</a> or <a href="Apache%20Subversion">subversion</a>.</p>

<h3>To be repeatable you need:</h3>

<ul>
<li>Version control in use for source code</li>
<li>Version control in use for build scripts * Version control in use deployment scripts</li>
<li>Version control in use for data migrations</li>
</ul>


<h3>To be consistent your need:</h3>

<ul>
<li>Libraries and dependencies managed</li>
<li>Version control usage policies determined by change management process</li>
</ul>


<h3>To be quantitatively  managed, you need:</h3>

<ul>
<li>Developers check-in to mainline at least once a day</li>
<li>Branching only used to release.</li>
</ul>


<h3>To be at an optimising level, you need:</h3>

<ul>
<li>Regular validation that CM policy supports effective collaboration</li>
<li>Regular validation that CM policy supports rapid development</li>
<li>Regular validation that CM policy supports auditable change management processes</li>
</ul>


<h2>This leads to?</h2>

<p>When you score all these assesments questions, and you plot them on the <a href="http://hajee.github.io/2013/10/02/visualize-your-continuous-deployment-maturity/">graph</a>. You get the next graph.</p>

<p><img src="http://hajee.github.io/images/maturity_model.png" title="Visualize the level of maturity for the six interest area's" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On your way to easier deployments?]]></title>
    <link href="http://hajee.github.io/2013/10/17/levels-of-maturity-for-continuous-deployment/"/>
    <updated>2013-10-17T17:15:13+02:00</updated>
    <id>http://hajee.github.io/2013/10/17/levels-of-maturity-for-continuous-deployment</id>
    <content type="html"><![CDATA[<p>In <a href="http://hajee.github.io/2013/10/02/visualize-your-continuous-deployment-maturity/">my last blog post</a>, I described the main area&rsquo;s of interest to work on to get faster and easier deployments. For every area,  the level of maturity may be different. In this blog post,  I will dive deeper in the levels of maturity and what they mean.</p>

<!-- more -->


<p>Like I told in the previous blog posts, this information is based on the book <a href="http://www.amazon.com/gp/product/0321601912?ie=UTF8&amp;tag=martinfowlerc-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321601912">&ldquo;Continuous Delivery&rdquo;</a> by <a href="http://jezhumble.net/">Jez Humble</a> and <a href="http://www.davefarley.net/">David Farley</a></p>

<h1>The Five maturity levels</h1>

<p>In the model, they describe the following five levels.</p>

<ol>
<li>Regressive</li>
<li>Repeatable</li>
<li>Consistent</li>
<li>Quantitatively managed</li>
<li>Optimizing</li>
</ol>


<p><img src="http://hajee.github.io/images/maturity-levels.png" title="The levels of maturity" ></p>

<h3>Regressive</h3>

<p>There is no process for releasing and delivering software. A new deployment becomes an intensive event with a lot of opportunity to fail. A successful deployment is a victory. Although the number in the list says 1. In their book, Jez and David call the level -1. Minus because deployment is actually in the toddler stage.</p>

<h3>Repeatable</h3>

<p>When you are at this level of maturity, some stuff is being take care of. Changes management processes are in lace. There are clear guidelines of what to do and when to do it. Most of the times the organisations have a OTAP strategy, but most of the testing is done by humans. Only a small part of the tests, if any, is automated. Not a lot has been done to automate deployment. Most of the work is done by typing commands on a terminal based on a script in a paper document. In my view,  this is the minimum level at which you can rightfully claim you are doing <a href="http://en.wikipedia.org/wiki/Information_Technology_Infrastructure_Library#ITIL_V3">ITIL</a>. As you can see this is still much lower than the levels proposed in <a href="http://www.amazon.com/gp/product/0321601912?ie=UTF8&amp;tag=martinfowlerc-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321601912">the book</a></p>

<h3>Consistent</h3>

<p>At this level of maturity,  you have a broad set of automated tests. The tests are  at a sufficient level to detected critical errors early end often. The deployment is getting more and more automated. Deploying a new version to an integrated testing environment becomes easy.</p>

<h3>quantitatively managed</h3>

<p>The testing and deployment are fully automated, and there is a pipeline in place to do the testing and deployments in OTAP environments. Bad versions are caught in the deployment pipeline before they reach production. Because deployments are easy and the quality of releases increase, teams start to do more and smaller deployments. The statistics of builds and deployments are tracked, and acted upon.</p>

<h3>optimizing</h3>

<p>At the final level, not only all processes and tools are in place, but the whole organisation around building, testing and deploying software is constantly improving. Teams regularly discuss the problems and fix them. Every deployment, whether it is in production or any test environment is a vehicle for improvement.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Area's of interest for continuous deployment]]></title>
    <link href="http://hajee.github.io/2013/10/12/areas-of-interest-to-realize-continuous-deployment/"/>
    <updated>2013-10-12T22:25:10+02:00</updated>
    <id>http://hajee.github.io/2013/10/12/areas-of-interest-to-realize-continuous-deployment</id>
    <content type="html"><![CDATA[<p>In <a href="http://hajee.github.io/2013/10/02/visualize-your-continuous-deployment-maturity/">my last blog post</a>, I showed a way to visualize the level of maturity for the six interest area&rsquo;s of continuous delivery. In this blog post,  I will dig deeper into what the areas of interest are.</p>

<!-- more -->


<h2>The area&rsquo;s of interest</h2>

<h3>Build management and continuous integration</h3>

<p>Build management are all processes and tools we need to ensure that ,at any point in time, we can build a specific version of our software. Besides being able to build it, we also need to ensure that is works. To do this, we need a set of (preferably automated) unit-tests. To be able, to quickly see the impact of source code changes, at least every night a build must be done.</p>

<h3>Environments and deployments</h3>

<p>To be able to do continuous delivery, there must be a pipeline of systems for doing DTAP(Development Testing, Acceptance and Production) like tests. It is cheap (meaning automated) to get a new environment for testing. Systems provisioning and application deployments are all automated. Also, there needs to be a way to automatically roll back to a previous well known working system state.</p>

<h3>Release management and compliance</h3>

<p>Besides all sorts of tooling stuff, processes must be in place. There must be a (strict) change management process including regulated approvals to go from state to state (e.g. from testing to acceptance and so on to production). These change management processes and approvals must be enforced.</p>

<h3>Testing</h3>

<p>To be able to do continuous delivery, testing must be highly automated. You need at least automated unit-tests and a set of automated acceptance tests. It is preferable to have the acceptance test scenario&rsquo;s written by testers and business representatives in cooperation. Not only functional tests need te be automated, there needs to be some sort of mechanism te check non-functional requirements like, for example, response times</p>

<h3>Data management</h3>

<p>While most automated installation scripts focus on provisioning the software. The data in the database is just as important. Therefore, you need to have automated the way you change your data model and also the configuration data inside the database.</p>

<h3>Configuration management</h3>

<p>To be able to get built every version in time at any moment,  we need source code management tools like <a href="http://git-scm.com/">git</a> or <a href="Apache%20Subversion">subversion</a>. All components needed to get the software working, must be under this regime of version control. This includes the libraries and all database changes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visualize your continuous deployment maturity]]></title>
    <link href="http://hajee.github.io/2013/10/02/visualize-your-continuous-deployment-maturity/"/>
    <updated>2013-10-02T17:15:13+02:00</updated>
    <id>http://hajee.github.io/2013/10/02/visualize-your-continuous-deployment-maturity</id>
    <content type="html"><![CDATA[<p>Looking around the Internet, you see more and more companies starting to do multiple deployments per day. There are the <a href="https://www.facebook.com/notes/facebook-engineering/ship-early-and-ship-twice-as-often/10150985860363920">stories of Facebook deploying multiple times per day</a>. The stories of <a href="http://blog.utest.com/continuous-deployment-and-testing-in-production/2012/12/">The Guardian</a> and many more. If you want to go down that path, it really helps having a way of visualizing where you are, and where you want to go to. This helps the discussion with the stakeholders and gets things going. In this blog post,  I will demonstrate a way to do just that.</p>

<!-- more -->


<p>In their 2010 seminal work <a href="http://www.amazon.com/gp/product/0321601912?ie=UTF8&amp;tag=martinfowlerc-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321601912">&ldquo;Continuous Delivery&rdquo;</a> <a href="http://jezhumble.net/">Jez Humble</a> and <a href="http://www.davefarley.net/">David Farley</a> described a maturity model for continuous delivery. The goal of this model was to assess the gap between where you are and where you want to be and help to define the steps you need to take to go there.</p>

<p>The model identifies six main area&rsquo;s of interest:</p>

<ul>
<li>Build management and continuous integration</li>
<li>Environments and deployments</li>
<li>Release management and compliance</li>
<li>Testing</li>
<li>Data management</li>
<li>Configuration management</li>
</ul>


<p>Each of these area&rsquo;s must be at a certain level to be able to achieve the benefits of continuous delivery. One of the key points for increasing your continuous delivery performance is to make well-balanced steps. It doesn&rsquo;t really help if your build management is top notch 100%, but you don&rsquo;t have any automated testing. Value comes when you increase the level of maturity evenly over all six focus area&rsquo;s.</p>

<p><img src="http://hajee.github.io/images/maturity_model.png" title="Visualize the level of maturity for the six interest area's" ></p>

<p>The picture shows a method to make these levels visual. This really helps in discussions with stakeholders in finding out where you are and where you need to go. Based on the graph above, you can see that it&rsquo;s best to work on improvements in data management and configuration management before you start to address other area&rsquo;s.</p>

<h1>What&rsquo;s the scale?</h1>

<p>In the model, they describe the following 5 levels:</p>

<ol>
<li>Regressive</li>
<li>Repeatable</li>
<li>Consistent</li>
<li>Quantitatively managed</li>
<li>Optimizing</li>
</ol>


<p>These levels are loosely based on the levels defined by the <a href="http://en.wikipedia.org/wiki/Capability_Maturity_Model">Capability Maturity Model</a> originally from the <a href="http://www.sei.cmu.edu/">Carnegie Mellon Software Engineering Institute (SEI)</a>. The higher the number the better you are.</p>

<h2>What&rsquo;s next?</h2>

<p>In the <a href="http://hajee.github.io/2013/10/12/areas-of-interest-to-realize-continuous-deployment/">next blog post</a>, I will dig deeper into the six main area&rsquo;s of interest.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The specifications]]></title>
    <link href="http://hajee.github.io/2013/01/02/the-specifications/"/>
    <updated>2013-01-02T19:28:48+01:00</updated>
    <id>http://hajee.github.io/2013/01/02/the-specifications</id>
    <content type="html"><![CDATA[<p><a href="http://www.appdrones.com">Appdrones</a> uses the specifications as a basis for all the work in the work packages. In this blog post and video we will introduce the Appdrones speciations system.</p>

<!-- more -->


<h2>Gherkin</h2>

<p>The Appdrones specifications are based on Gherkin. Gherkin is is a Business Readable, Domain Specific Language that lets you describe software’s behaviour without detailing how that behaviour is implemented. Gherkin serves two purposes – documentation and automated tests.</p>

<iframe class="left-image" width="420" height="315" src="http://www.youtube.com/embed/oZr6l22R8p0" frameborder="0" allowfullscreen=""></iframe>


<h3>A feature</h3>

<p>In Gherkin functionality is described in features. A feature is a description of some sort of functionality you need. Every Feature has the following elements:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="k">Feature:</span><span class="nf"> Feature</span>
</span><span class='line'><span class="nf">description</span>
</span><span class='line'><span class="nf"> Narrative </span>
</span><span class='line'><span class="nf">Scenarios</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the narrative you can write anything you want, but the best thing is to use the narrative to describe what the business value of the feature. You can do this by questioning why you need this feature. This is called “popping the why stack”. You describe the narrative in the following format:
In order to have some business value</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="nf">as a specific user</span>
</span><span class='line'><span class="k">I </span><span class="nf">want to do some stuff</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Scenarios</h3>

<p>A feature can have one or more scenarios. A scenario describes a specific situation in your feature. Let me give you an example: In the video we enter the feature “Order Pastries”. Within the feature we have the scenario: new customer and the scenario returning customer. In both cases we need to do something else.</p>

<h2>Gradually build your specs</h2>

<p>Most of the times when you start with a new project, you just have a basic idea of the functionality you want. You start with just entering the high level features.  Later you can enter the scenarios.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Appdrones]]></title>
    <link href="http://hajee.github.io/2012/07/19/introducing-appdrones/"/>
    <updated>2012-07-19T20:28:10+02:00</updated>
    <id>http://hajee.github.io/2012/07/19/introducing-appdrones</id>
    <content type="html"><![CDATA[<p>Building software has always been a difficult and error-prone activity. The examples of failed software development projects are numerous. A lot of progress has been made the last couple of years. <a href="http://www.appdrones.com">Appdrones</a> builds on this progress to provide businesses a better way to outsource application development. We believe that getting your application built can be easier.</p>

<!-- more -->


<h2>A lot of progress</h2>

<p>Al lot of progress has been made in the last couple of years:</p>

<ul>
<li>The introduction of the agile movement has put focus on business value. Agile combined with Test Driver Development; Behavior Driven Development and outside-in development has helped software developers deliver the right software to their customers.</li>
<li>Specification by example, also known as executable specifications, has helped bridge the communication barrier between developers and customers. Using these developments, customers have better tools to describe the software they need.</li>
<li>Recent developments in continuous integration and continuous delivery helped IT to deliver the results faster and at a more constant quality.</li>
<li>Platforms as a Service (PaaS) has helped developers to put their application onto the web faster and easier.</li>
</ul>


<p><img src="http://hajee.github.io/images/appdrones-screenshot.png" title="A screen shot of the Appdrones application" ></p>

<h2>No changes in business model</h2>

<p>This has all been beneficial for IT professionals and in the end also to their customers. It only hasn’t changed the business model behind application development. Appdrones aims to do just that. Change the business model behind building an application. We make software easier.</p>

<h2>How to achieve this?</h2>

<p>To achieve this, Appdrones provides the business owner with the following tools:
* A specification system to “harvest” the specifications behind his idea.
* A market place to get help. Bon the market place he can find an analyst who can help refine the specifications; a designer who can design the pages; a developer who can build the application
* The specifications are transformed into executable specifications, so during development every change by the developer leads to a test against the specification. Progress is instantly reported to the customer.
* During development the business owner always has access to the last version the developer has commited to the version management system.
* After the work is done, one push on is sufficient to deploy the application in production mode.</p>

<p>Next post I&rsquo;ll tell you more about the integrated progress monitoring.</p>
]]></content>
  </entry>
  
</feed>
