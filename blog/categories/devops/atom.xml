<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: devops | People & Software]]></title>
  <link href="http://hajee.github.io/blog/categories/devops/atom.xml" rel="self"/>
  <link href="http://hajee.github.io/"/>
  <updated>2014-09-27T10:06:51+02:00</updated>
  <id>http://hajee.github.io/</id>
  <author>
    <name><![CDATA[Bert Hajee]]></name>
    <email><![CDATA[hajee@moretIA.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Review of the book Mastering Puppet]]></title>
    <link href="http://hajee.github.io/2014/09/26/review-of-the-book-mastering-puppet/"/>
    <updated>2014-09-26T22:58:22+02:00</updated>
    <id>http://hajee.github.io/2014/09/26/review-of-the-book-mastering-puppet</id>
    <content type="html"><![CDATA[#Review of the book 'Mastering puppet'

I've had the privilege of reviewing a new Puppet book. The book is called
['Mastering Puppet'](https://www.packtpub.com/networking-and-servers/mastering-puppet) and it is published by [Packt publishing](https://www.packtpub.com/)  and written by Thomas Uphill.


<img src="https://dgdsbygo8mp3h.cloudfront.net/sites/default/files/imagecache/ppv4_main_book_cover/2189OS_cov.jpg" title="The book cover" >

<!-- more -->


##Structure of the book
The book is 251 pages that contain the following ten chapters:
- Dealing with Load/Scale
- Organizing Your Nodes and Data
- Git and Environments
- Public Modules
- Custom Facts and Modules
- Custom Types
- Reporting and Orchestration
- Exported Resources
- Roles and Profiles
- Troubleshooting

##Learning style
All chapters contain lots of commands and screen output. This way you are taken through the commands needed to get the job done. Some people like this. Personally when I read the term "Mastering" in a book title, I expect the book to be a book written for people who are almost master. I find this book more of a Puppet cookbook than a book that explains the mastery details of Puppet.

Almost from the start of the chapter, it dives into the details and commands needed to get the job done. This without showing the big picture.

## Book content
Most of the chapters in the book address existing challenges for using Puppet in big enterprise environments. Chapter 1 discusses how to scale puppet servers. Given the fact that Puppetlabs just announces a much better performing puppet server, shows that this used to be a real challenge. But it is uncertain if the tips and tricks in this chapter are still needed and if they still work.

I would have liked the chapter on roles and profiles to be a bit more elusive. I think that getting the roles and profiles right, helps big to keep enterprise environments manageable in puppet. The chapter in the book just scratches the surface and leaves a lot of important stuff to be discovered.

Same thing applies to the chapter on custom types. The chapter deals mostly with `defined types` and a small part of the chapter is on custom types. Again personally I would've liked these chapters to be more extensive. If you want to know more about custom types, you can always get the book [Puppet Types and Providers](http://shop.oreilly.com/product/0636920026860.do) by [Dan Bode](http://www.oreillynet.com/pub/au/5593) and [Nan Liu](http://www.oreilly.com/pub/au/5594)

## Conclusion
Some of my comments are pretty harsh. This doesn't mean the book isn't useful. Like I said before, the book is more of a cookbook then a book explaining how to become a master at Puppet. But if you look at the book as a cookbook, it is a pretty extensive cookbook. A cookbook that takes the by the hand and guides it through a couple challenges of using Puppet in the enterprise.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Puppet at the Puppet Pizza Place]]></title>
    <link href="http://hajee.github.io/2014/06/26/pietros-puppet-pizza-place-1/"/>
    <updated>2014-06-26T14:36:46+02:00</updated>
    <id>http://hajee.github.io/2014/06/26/pietros-puppet-pizza-place-1</id>
    <content type="html"><![CDATA[#Learning Puppet at the Puppet Pizza Place

In this set of blog posts, I will teach you the base concepts of the [puppet DSL](http://puppetlabs.com/puppet). Most of the time Puppet is taught within the context of IT configuration management. I've chosen not to do so. I've chosen baking pizza's as the learning environment. It helps less technical people, like IT managers, for example, to get the concepts of Puppet.


<!-- more -->

## Pietro's Puppet Pizza Place

Pietro was worn out. He'd had a very busy day at his pizza place. Business was going well. Too well actually. Every evening he was totally worn out.To keep his business growing, but be less worn out at the end of the day, Pietro had started to look around for some help.

###Miss Piggy
On the Internet, he'd run into this ad for *"Miss Piggy The Puppetized Pizza Robot"*. Miss Piggy was advertised as a robot able to make all sorts of Pizza's. To control Miss Piggy, they used Puppet DSL. A DSL able to describe all the Pizza's in the world. This looked like just the help Pietro needed, So he ordered it.

###Running along..
All the examples in this blog post do really run. You can install the modules needed to do so by using the next commands:
```
$ puppet module install hajee/pizza
```

Obviously you need to have Puppet installed first. Check  the [Puppet installation guide](http://docs.puppetlabs.com/guides/install_puppet/pre_install.html) for information on how to do this.

If you want more information about the Puppet pizza module, checkout [the puppet forge page](https://forge.puppetlabs.com/hajee/pizza) for this module.

###Getting to know Miss Piggy
Miss Piggy looked like an ordinary robot. It just didn't do anything yet. Pietro needed to tell Miss Piggy what he wanted. What kind of pizza he would like Miss Piggy to make.  Let's first see what ingredients Miss Piggy knew. Pietro looked in the manual and typed the command:

```sh
$ puppet describe -l
These are the types known to puppet:
anchovy         - Add anchovy to the pizza or modify the amount ...
bacon           - Add bacon to the pizza or modify the amount o ...
cheese          - Add cheese to the pizza or modify the amount  ...
crust           - Select the crust for your pizza
mushroom        - Add mushrooms to the pizza or modify the amou ...
salami          - Add salami to the pizza or modify the amount  ...
tomato_sauce    - Add tomato sauce to the pizza or modify the a ...
```

This showed a list of all components (ingredients) Miss Piggy new. In the manual, it stated that Puppet knows these ingredients as types. 

Seeing this list of things Pietro knew about, he started to get enthusiasts. Let's start with the crust. Again Pietro looked in the manual. It stated that in order to get to know a type intimately, you can ask Puppet for information. So Pietro typed:

```sh
$ puppet describe crust
crust
=====
Select the crust for your pizza. An example:
crust{"large_wholesome_pan_crust":
  ensure    => baked,
  size      => 20,          # 10", 20"
  type      => 'pan',       # thin
  dough     => 'wholesome', # wholesome ore white
}


Parameters
----------

- **dough**
    The type of dough to use for your crust
    Valid values are `wholesome`, `white`, `regular`.

- **ensure**
    is the crust baked or raw
Valid values are `baked`, `absent`.

- **name**
    The ingredient's name

- **size**
    the size of the pizza crus in inches

- **type**
    The type of crust
Valid values are `thin`, `pan`, `regular`.

Providers
---------
    simple 
```

###The first try
He started to get more and more excited. He expected a lot of technical stuff, but instead he saw that Puppet knew about pizza's. Puppet knew about pan and regular pizza's and about regular and wholesome dough. So let's get Miss Piggy to make a crust. Pietro opened a file and entered the instruction:

```
crust{"large_wholesome_pan_crust":
  ensure    => baked,
  size      => 20,          # 10", 20"
  type      => 'pan',       # thin
  dough     => 'wholesome', # wholesome ore white
}
```
Then he saved it as `crust.pp` and told Puppet to go do it.
```sh
$ puppet apply crust.pp
Notice: Compiled catalog for macintosh.local in environment production in 0.10 seconds
```

All of a sudden he saw Miss Piggy come to life. She started buzzing and beeping. Got some wholesome dough. Made it into a 20" slice, put it into a pizza pan and pushed it into a pizza oven. After 3 minutes, Pietro was staring at a perfect pizza crust. A bleep on then Puppet console showed that Puppet was ready.

```
Notice: /Stage[main]/Main/Crust[large_wholesome_pan_crust]/ensure: ensure changed 'present' to 'baked'
Notice: Finished catalog run in 181.10 seconds
```

###What did I do?
Pietro took a while to take this all in. What exactly did he do? He described through a Pupped DSL how the pizza should look. He didn't describe how to make it. Miss Piggy already knew that. She knew about the dough. She knew about pan pizza's and about the pizza size. Pietro just had to describe it in the DSL. The DSL was actually very simple. Just name the resource (type/ingerdient) place a `{`, specify a name. Any name as long as it is unique for the resource. Close it of with a `: ` sign and then start with the properties of the pizza. Every property contains a name like for example: `size` and a value like `20`. They are separated by a `=>` sign. After the value, he placed a `,`. Even after the last value. After the last value, the description was closed off with a `}` sign.


###Add some sauce and cheese
That was good, but not enough. A crust is not a pizza. Pietro needed to add some tomato sauce and cheese. He opened a new file named `pizza.pp` and entered all the ingredients for a real pizza.

```
  crust{"large_wholesome_thin_crust":
    ensure    => baked,
    size      => 20,          # 10", 20"
    type      => 'thin',       # thin
    dough     => 'wholesome', # wholesome ore white
  }

  tomato_sauce{"thin_cristal":
    ensure      => 'present',
    type        => 'cristal',
    composure   => 'thick',
    amount      => 5,
  }

  cheese{"mozzarella_thick":
    ensure      => 'present',
    type        => 'mozzarella',
    amount      => '2',
  }
``` 

Just like before, Pietro instructed Miss Piggy to go and do it.

```
$ puppet apply pizza.pp
Notice: Compiled catalog for macintosh.local in environment production in 0.14 seconds
Notice: /Stage[main]/Main/Tomato_sauce[thin_cristal]/ensure: created
Notice: /Stage[main]/Main/Crust[large_wholesome_thin_crust]/ensure: defined 'ensure' as 'baked'
Notice: /Stage[main]/Main/Cheese[mozzarella_thick]/ensure: created
Notice: Finished catalog run in 181.10 seconds
```
But now something strange happened. Miss Piggy started by putting tomato sauce on the table and then adding the crust dough afterwards. That was obviously **not** what Pietro wanted. There must be some defect in Miss Piggy. Everyone knows that the pizza crust must be available **before*** the tomato sauce and other ingredients can be added.

Pietro looked in the manual. Aah there it was. Miss Piggy knows a lot, but you have to tell it the order in which the  ingredients are applied. To do this, add an explicit order in the description of the pizza. You can do this by using the `require` keyword.  Let's change the pizza description and save it as `pizza2.pp`. To make it more interesting, let's change some ingredients as well. Let's make medium thin pizza with thick cristal tomato sauce and a lot of mozzarella.

```
crust{"medium_wholesome_thin_crust":
    ensure    => baked,
    size      => 10,          # 10", 20"
    type      => 'thin',       # thin
    dough     => 'wholesome', # wholesome ore white
}

tomato_sauce{"thick_cristal":
  ensure      => 'present',
  type        => 'cristal',
  composure   => 'thick',
  amount      => 5,
  require     => Crust["medium_wholesome_thin_crust"],
}

cheese{"a_lot_of_mozzarella":
  ensure      => 'present',
  type        => 'mozzarella',
  amount      => '4',
  require     => Tomato_sauce["thick_cristal"],
}
```

```sh
$ puppet apply pizza2.pp
Notice: Compiled catalog for macintosh.local in environment production in 0.15 seconds
Notice: /Stage[main]/Main/Crust[medium_wholesome_thin_crust]/ensure: defined 'ensure' as 'baked'
Notice: /Stage[main]/Main/Tomato_sauce[thick_cristal]/ensure: created
Notice: /Stage[main]/Main/Cheese[a_lot_of_mozzarella]/ensure: created
Notice: Finished catalog run in 182.08 seconds
```
Pietro waited anxiously. What would Miss Piggy do this time? After 3 minutes, Pietro was looking at a perfect pizza Napolitana. That was much better. First the crust, then the tomato sauce and last but not least the cheese.

###What did I do?

To make this an optimal learning experience, again Pietro looked at what he had accomplished. To be sure the ingredients were added in the right order, he had to specify what the order was. He could do so using the `require` attribute on an ingredient. The value of the `require` keyword was a reference to another ingredient. To specify a reference, you needed to start it with a capital letter. So `tomato_sauce` became `Tomato_sauce`. To uniquely identify the ingredient, he used the name of the ingredient as specified before and put it between a `[` and `]` character. So the reference to the thick cristal tomato sauce became:

```
require     => Tomato_sauce["thick_cristal"],
``` 

##Next time...
That was a lot of learning going on. Pietro was even more worn out than normal. But he had confidence the Miss Piggy Puppet Pizza Robot was going to help him a lot. Tomorrow he would start at making descriptions for the first half of his menu.]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Puppet to manage Oracle]]></title>
    <link href="http://hajee.github.io/2014/02/23/using-puppet-to-manage-oracle/"/>
    <updated>2014-02-23T08:01:51+01:00</updated>
    <id>http://hajee.github.io/2014/02/23/using-puppet-to-manage-oracle</id>
    <content type="html"><![CDATA[Russ looked at his screen. He started to get a bit weary. How in heavens name would he be able to manage this. He was looking at the requests he had for twenty applications that all had specific Oracle database needs. All different with regards to tablespaces, users, rights and services. And if that wasn’t bad enough in itself, all of the project teams building those applications, had up to 5 specific environments with different sizes and sometimes other settings. Russ definitely could use some help with this.

If you are like Russ in dire need of help manageing your Oracle databases, you should checkout this blog post. It describes a Puppet module we are building and already using to manage the dba objects of an Oracle database.

<!-- more -->

##The requirements

After discovering the [Puppet Oracle module](https://forge.puppetlabs.com/hajee/oracle), Russ felt a little bit less anxious. This could really make life a bit more easy.

First Russ started to look at the PIO application. The requirements for installing the PIO application where:

 1. An Oracle tablespace named `PIO_DATA` with a size of 200 Gigabyte
 2. An oracle user `PIO_USER` with the default tablespace set to `PIO_DATA` and only `connect`, `select any table` and `create table` rights. Also the user must have unlimited quota's in the `PIO_DATA` tablespace
 3. An Oracle role `PIO_APPLICATION_USER`
 4. A Service named like the application. So a  `PIO` service.

<sup>(This list is slimmed down a bit to make it more readable.)</sup>

##The PIO Tablespace

Let's start with the tablespace requirement. With the new found Oracle module, this looks like a strait forward Puppet definition. This code should do the trick:

```ruby
tablespace {'PIO_DATA':
  ensure                    => present,
  bigfile                   => yes
  datafile                  => 'pio_data.dbf'
  size                      => 200G,
  logging                   => yes,
  autoextend                => on,
  next                      => 100M,
  max_size                  => 12288M,
  extent_management         => local,
  segment_space_management  => auto,
}
```

So that takes care of requirement 1. let's test it.

Wait, the Oracle module doesn't install Oracle itself. What good is a module like this if you haven't gotten Oracle installed. Fortunately Russ found [Edwin Biemond's Oracle DB module](https://forge.puppetlabs.com/biemond/oradb) to take care of the installation.

##The PIO User

The oracle user `PIO` is a little bit more difficult. It has a default tablespace. So we must make sure the tablespace already exist before we start creating the user.

```ruby
oracle_user{'PIO':
  temporary_tablespace      => temp,
  default_tablespace        => 'PIO_DATA',
  password                  => 'justapassword,
  require                   => Tablespace['PIO_DATA'],
  grants                    => ['SELECT ANY TABLE', 'CONNECT', 'CREATE TABLE'],
  quotas                    => {
                                  'PIO_DATA'  => 'unlimited'
                              },
}
```

Again this looks like a strait forward Puppet definition. No Exec's no if's, just an easy readable Puppet definition. Requirement 3 fulfilled.

##The PIO_APPLICATION_USER role and the PIO service

Making sure the role and the service exist, s super easy. Just look at this code: 

```ruby
role {'PIO_APPLICATION_ROLE':
  ensure    => present,
}

oracle_service{'PIO':
  ensure  => present,
}

```
This completes the list of requirements for one application. But when Russ looked at the other application's, he noticed a very similar pattern. A user, a tablespace a role and a service. Only the values of the different applications where different.

##Puppet defined types to the rescue

Puppet has some nice mechanisms to handle just this kind of repeating pattern. A `defined typ[e` . let's create this type to manage all of Russ's applications.

```ruby
define db::app(
  $tablespace_name    = "${name}_data",
  $password           = $name,
  $size               = 3072M,
  $maxsize            = 12288M,
  $next               = 100M,
  $user_rights        = ['SELECT ANY TABLE'
                        , 'CONNECT'
                        , 'CREATE TABLE'
                        ]
){
 # include the class that installes Oracle. to make sure
 # This defined type is run after the Oracle installation

  tablespace {$tablespace_name:
    ensure                    => present,
    size                      => $size,
    logging                   => yes,
    autoextend                => on,
    next                      => 100M,
    max_size                  => 12288M,
    extent_management         => local,
    segment_space_management  => auto,
  }

  oracle_user{$name:
    temporary_tablespace      => temp,
    default_tablespace        => $tablespace_name,
    password                  => $password,
    require                   => Tablespace[$tablespace_name],
    grants                    => [$user_rights],
    quotas                    => {
                                    "${tablespace_name}"  => 'unlimited'
                                  },
  }

  $app_role = "${name}_application_user"

  role {$app_role:
    ensure    => present,
  }

  oracle_service{$name:
    ensure  => present,
  }

}
```

##The new and improved PIO definition

With this defined type in place, the `PIO` definition becomes:

```ruby
class pio {
  db::app{ 'pio':
    size      => 200G,
    password  => 'justapassword'
  }
}
```

For all the other applications, you can make the same kind of definitions. Your `node.pp` file could read like this:

```ruby
node "basenode" {
  include pio
  include axe
  include bcc
  ...
}
```

##You want to start as well?

The code in the blog post is based on the [Puppet Oracle module](https://forge.puppetlabs.com/hajee/oracle). Checkout the [repository](https://github.com/hajee/oracle) if you want to see how we do it. This is a fresh project, so you might run into some bugs. Don't hesitate to register them at [the issue log](https://github.com/hajee/oracle/issues).

##You can help?

That would be great. We only have a couple of Oracle DBA objects covered right now. There are lot's more. It would really be nice if we could get this module covering a lot of Oracle stuff. Clone the [repository](https://github.com/hajee/oracle) make your enhancements and post a pull request.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puppet Custom Types, the easy way (part 2)]]></title>
    <link href="http://hajee.github.io/2014/02/08/puppet-custom-types-the-easy-way-part-2/"/>
    <updated>2014-02-08T13:57:20+01:00</updated>
    <id>http://hajee.github.io/2014/02/08/puppet-custom-types-the-easy-way-part-2</id>
    <content type="html"><![CDATA[In the [last blog post](/2014/01/26/puppet-custom-types-the-easy-way/), we started with our own custom type. We added the `easy_type` module, created the files necessary for getting started and got our custom running without any errors. We then added two lines to get into a state where Puppet was able to do an inventory of our systems. But a custom type not able to create, delete or modify the state of your system, wouldnt be very helpful. So in the blog post we are going to add that functionality to our custom_package type.

<!-- more -->

##Let's recap
Let's first look back at what we did last time. To get started with [easy_type](https://github.com/hajee/easy_type), we made sure `easy_type` is installed in the module path. We used `librarian-puppet` to get `easy_type` installed. After that,  we created the right directories and created a scaffold. Since the last blog post,  we have added the scaffold to the `easy_type`. This makes's it even easier to get started. To get it, use the next command:

```sh
cp -Rv easy_type/scaffold custom_package/lib/puppet
```

After we created the scaffold, we checked what puppet would do with the type and noticed `Puppet` didn't do anything, but also didn't complain. So a good start.

Then we added the 2 lines of code for getting the raw package information from the system. After that,  we added the 1 line of code that picked the name and version information from the raw package information. Then we had a working Puppet custom type. 

<img src="/images/custom_package_list.png" title="Index from custom_package" >

Wel working...Sort of. Because the type doesn't know yet how it can create, delete and modify resources. So that's what we're going to do next.

##How to create a resource in real life?
Like I said in the [last blog post](/2014/01/26/puppet-custom-types-the-easy-way/), a design goal of `easy_type` is to let you focus on the resource knowledge and let us do the Puppet stuff. So what is needed to create a new `custom_package` instance. To create a new `custom_package` instance, we need to install a package.

For `easy_type`,  it would be the easiest thing if we could use the same base command as we used to get an index. That would be the `rpm` command, but in this case the best way to install a package is a `yum` command.

```sh
yum -q install a_package
```

This would install the latest version. But what if we needed a specific version? Then `a_package` needs to be both the name and the version number, concatenated with a dash. For example:

```sh
yum -q install php-5.2.6-2
```

Will install php version 5.2.6-2

##And how to do it in the Puppet world?
So how do we get this knowledge into our own custom type? First we have to add the extra command (`yum`) that is used. We do this by changing the `set_command` line to:

```ruby
set_command [:rpm, :yum]
```

This line tells `easy_type` that we use `rpm` and `yum` as commands. Next we have to tell `easy_type` to use `yum` when we need to create a resource:

```ruby
on_create do |command_builder|
  command_builder.add do
    yum "install -y #{name}"
  end
end
```

But wait. What about the version number? Don't we need to do add it somewhere? And you are right. We need to add it at the definition of the property. At the property add the lines:

```ruby
on_apply do |command_builder| 
  command_builder.append do
    "-#{version}"
  end
end
```

The method is only run when we need to create a resource or when the attribute value in the manifest is different from the attribute value on the system. So in this case, because we create a resource the method is called. With the `append` method, we tell the `command_builder` to add some text to the string created before by the `command_builder.add`.

So now we are able to create a `custom_package` resource.

<img src="/images/custom_package_created.png" title="Install a package using custom_package type" >

##And now some destruction
Like we saw before, `yum` is the command used to install a package. `yum` is also used to uninstall a package and therefore delete a resource in the Puppet world. The command will be:

```sh
yum -q erase a_package
```
To get this wisdom into our custom type, we need to add some code to the `on_destroy` handler.

```ruby
on_destroy do | command_builder|
  command_builder.add do
    yum "erase -y #{name}"
  end
end
```

So besides indexing and creating, now our custom type is also ready for to destroy a resource.

<img src="/images/custom_package_destroy.png" title="Install a package using custom_package type" >

##How about modifying?

Like we did before, we want to focus on our knowledge of the resource. What do we do when we modify the version attribute? 

<blockquote><p>The on_modify handler is a naive implementation that does not handle downgrade properly. The correct implementation should compare against the installed software version and invoke package downgrade when appropriate. The code here is kept simple; for more complete examples, see the ~/src/puppet/lib/puppet/provider/packages directory.</p><footer><strong>Just like in the book Puppet Types and providers</strong></footer></blockquote>

So in our simple case, we just install the specified version. Actually we just do an `on_create`. So let's tell our type to behave like that.

```ruby
on_modify do | command_builder|
  on_create(command_builder)
end
```

So now when we change the version number, a different package is installed.

<img src="/images/custom_package_modified.png" title="Install a package using custom_package type" >

## AND TA TAAHH
Now we are ready. We have a Custom Puppet Type that has the ability to:

* Do an index
* create a new resource
* destroy/delete a resource
* and modify an existing resource

If we don't count the  boiler plate code, then we added just 18 lines of code to get this working. Not to bad.

##There's a lot more
Like I said in the introduction, this is really a simple example. Real life custom types are more difficult. So `easy_type` has some more functionality that is not shown in this examples. 

* support for standard mungers
* support for standard validators
* A lot of tricks in the command_builder so it's easy to build commands based on what Puppet thinks, needs to be done.
* support for extracting the definition of attributes and properties

If you would like to see more about `easy_type`, just let me know and I will see if we can do some more posts about it. For now, check the example source in the [github repository](https://github.com/hajee/my_own_easy_type). You can also check some [Oracle Custom Types](https://github.com/hajee/oracle) which are build upon `easy_type`. 

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puppet Custom Types, the easy way]]></title>
    <link href="http://hajee.github.io/2014/01/26/puppet-custom-types-the-easy-way/"/>
    <updated>2014-01-26T13:57:20+01:00</updated>
    <id>http://hajee.github.io/2014/01/26/puppet-custom-types-the-easy-way</id>
    <content type="html"><![CDATA[Robert scratched his head. How would he get a Puppet class to manage a complex resource on his systems? I guess I’ll have to make a Custom Type, he thought. But last time I looked into that, I noticed you need to know a lot about Puppet Internals. 

If you recognize this thought process, maybe it’s time to meet [easy_type](https://github.com/hajee/easy_type). Like the name says, easy type is designed to make it easy to build a Custom Puppet Type. In this article, we will introduce [easy_type](https://github.com/hajee/easy_type). We do this by taking you along on in the process of  making a Custom Type. In the process, we explain how `easy_type` actually makes it…… well easy to build a Custom Type. In the first part, we will show you how to get Puppet to see and index all your resources. In the next blog posts, we will enhance the Custom Type to be able to create, remove and modify existing resources.

<!-- more -->

##When to build a Custom Type

Well that’s an interesting question! The Puppet language is actually very versatile, and you can do anything with it. But why would you step out of puppet and into ruby to build a Custom Type? In one of his [excellent blog posts](http://garylarizza.com/blog/2013/11/25/fun-with-providers/), Gary Larizza explains it in one sentence: “Because 20 execs in a defined type… “. Another indication, you’d be better of on a Custom Type path instead of a defined type, is when you need to build one or more custom facts. 

<blockquote><p>What would drive someone to write a custom type and provider for Puppet anyhow? Afterall, you can do ANYTHING IMAGINABLE in the Puppet DSL*! After drawing back my sarcasm a bit, let me explain where the Puppet DSL tends to fall over and the idea of a custom type and provider starts becoming more than just an incredibly vivid dream:</p><p><ul><br/>	<li>You have more than a couple of exec statements in a single class/defined type that have multiple conditional properties like ‘onlyif’ and/or ‘unless’.</li><br/>	<li>You need to use pure Ruby to manipulate data and parse it through a system binary</li><br/>	<li>Your defined type has more conditional logic than your pre-nuptual agreement</li><br/>	<li>Any combination of similar arguments related to the above</li><br/></ul><br/>If the above sounds familiar to you, then you’re probably ready to build your own custom Puppet type and provider.</p><footer><strong>Gary Larizza in Fun With Puppet Providers</strong></footer></blockquote>

##Let’s get started

To get started, you first need to include `easy_type` in your `Puppetfile` or otherwise get it into your puppet directories. To add it to your `Puppetfile`, you can add the following line:

```ruby
mod "hajee/easy_type", :git => "git://github.com/hajee/easy_type.git"
```

After that run the librarian to add the right modules to your puppet tree:

```sh
librarian-puppet install
```

The `librarian` reads the `Puppetfile` and puts the nescecary files into your module tree. After this command, you can see `easy_type` in your  list of modules.

<img src="/images/easy_type_added.png" title="easy_type added to modules" >

Well that was easy. Now we have all the basic requirements in place to start. What better time then now to think about the resource you want to manage.

##How to manage the resource?
Because `easy_type` hides some of the Puppet intricacies from you, you can focus on the resource. To continue, you need to know how: 

-	get a list of all available resources? 
-	what’s important in a resource?
-	to create a resource?
-	to modify an existing resource
-	to remove one

This is the basic information you need to build a custom resource.

#An example please?

As an example I’ve picked the same Custom Type as is described in the book [“Puppet Types and Providers"](http://shop.oreilly.com/product/0636920026860.do).  This is an excellent book if you are into writing custom resources. It describes in great detail everything you must known and do to build a Custom Type in the standard puppet way. In the book they state:

<blockquote><p>the `custom_package` type is not intended to serve as a replacement of Puppet’s existing package type. It serves as an example of how to take advantage of the features of the type and provider APIs.</p><footer><strong>Puppet Types and Providers By Dan Bode</strong> <cite>Nan Liu</cite></footer></blockquote>

Of course, the same thing counts over here.

##A scaffold
To get started, it would be helfull if we have a scafffold. Let's say we want to name our own module `my_own_easy_type` and we name our own Custom Type `custom_package`. Let's start with creating the right directories. Go over to your module directory and create the following directories:

```sh
mkdir -p my_own_easy_type/lib/puppet/provider/custom_package
mkdir -p my_own_easy_type/lib/puppet/type/custom_package
``` 

The first code we need, is the next scaffold:

```ruby
require 'easy_type'

module Puppet

  newtype(:custom_package) do
    include EasyType

    # set_command(:the_righ_command)

    to_get_raw_resources do
      # What commando to give to get a list of all resource.
      # We need to return an Array of Hashes 
    end

    on_create do
      # What do we do to create a resource
    end

    on_modify do
      # What do we do to modify an existingresource
    end

    on_destroy do
      # What do we do to destroy/delete an existingresource
    end

    newparam(:name) do
      include EasyType
      isnamevar

      to_translate_to_resource do | raw_resource|
        # how to translate from the Hash-like raw resource to get the name
        # raw_resource.column_data(:name)
      end

    end

  end
end
```

Let's put it in `my_own_easy_type/lib/puppet/type/custom_package.rb`. The next file we need is the provider file.

```ruby
require 'easy_type'

Puppet::Type.type(:custom_package).provide(:simple) do
	include EasyType::Provider

  desc "Manage packages with easy_type"

  mk_resource_methods

end
```

We need to put that at `my_own_easy_type/lib/puppet/provider/custom_package/simple.rb`

##It works.... Well, kind of
Actually this is all you have to do to get the basic Puppet stuff in order. Now you can give the puppet command to get a view of all available resources:

```sh
puppet resource custom_package
```

And it shows..... nothing. No output. But what is more import at this stage, is no error's or warnings. Now we can start working on the thing we know best. How to get the information about our resource, a package in this example, out and manageable.

##Let's get the index of all packages
So let's change the `custom_package` so we can use Puppet to get a list of all resources. To do this, we need to add just a couple of lines. Lets first look at the method `to_get_raw_resources`. Its function is to return an Array containing all available resources you manage. Every Array entry is preferably a Hash. A Hash that contains the all the individual properties and parameters of an instance of your resource.

In our example,  we are managing packages. To get a list of packages on a Linux system, you can use the `rpm` command. The following os command returns a list of all packages formatted in a comma separated way containing its name and its version.

```sh
rpm -qa' --qf' %{NAME}, %{VERSION}\n
```

We would like the Custom Type to execute this command and convert the data to an Array of Hashes.

To do just that, we need to change the `to_get_raw_resources` method to:

```ruby
    to_get_raw_resources do
      packages_string = rpm('-qa','--qf','%{NAME}, %{VERSION}\n')
      convert_csv_data_to_hash(packages_string,[:name, :version])
    end
```
The `packages_string` will contain a string with all the information. The `convert_csv_data_to_hash` method will convert it to a hash. The elements in the hash are named `name` and `version`.

To let `easy_type` know rpm is an os command, we need to add the line:

```ruby
set_command(:rpm)
```

Now we need to let Puppet know how to get the name value from the raw resource. To do this, we change the definition of the name parameter.  We need to define the `to_translate_to_resource` method. Its function is to pick just the name out of the Hash that describes the full resource. You must define this function in every parameter or property. It receives a single instance of a resource in a Hash. It is one element from the Array of Hashes we created before. Because we named the first column in our comma separated data, `:name`, we can easily get it from the Hash. Lets define the function:

```
to_translate_to_resource do | raw_resource|
	raw_resource.column_data(:name)
end
```

##TA TAAHH

Now when we ask Puppet for the available `custom_packages`, we get a list of all the available packages.

```sh
puppet resource custom_package
```
Output:
```ruby
custom_package { 'GConf2':
  ensure  => 'present',
}
custom_package { 'MAKEDEV':
  ensure  => 'present',
}
...
```
But wait, didn't we also collect the version information? What about that? To Add the version information, we need to add a version property. A property looks very similar to the parameter that was already available in the scaffold. Here is the code for the version property:

```ruby
newproperty(:version) do
  include EasyType

  to_translate_to_resource do | raw_resource|
    raw_resource.column_data(:version)
  end
end
```

Now when we ask Puppet for the available `custom_packages` again, we get a list of all the available packages, inclusing the version information.

```sh
puppet resource custom_package
```
Output:

```ruby
custom_package { 'GConf2':
  ensure  => 'present',
  version => '2.14.0',
}
custom_package { 'MAKEDEV':
  ensure  => 'present',
  version => '3.23',
}
...
```

##Next...
In the [next blog post](/2014/02/08/puppet-custom-types-the-easy-way-part-2/), we will enhance our work. We will add support for changing existing resources. If, in the meanwhile you want to check `easy_type` out. You can checkout the source in the [github repository](https://github.com/hajee/easy_type). You can also check some [Oracle Custom Types](https://github.com/hajee/oracle) which are build upon `easy_type`. We would love to hear your feedback on this work. You can find the example [here](https://github.com/hajee/my_own_easy_type)

_Since first publication, some changes where made to the code fragments in this blog post. If you used the code in this post, please check the changes in the github repo_]]></content>
  </entry>
  
</feed>
